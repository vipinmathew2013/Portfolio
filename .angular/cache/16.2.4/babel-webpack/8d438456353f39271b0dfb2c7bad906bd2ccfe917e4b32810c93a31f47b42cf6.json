{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, Output, Pipe, NgModule } from '@angular/core';\nimport { Subject, from } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * Toast style.\r\n */\nvar SnotifyStyle;\n(function (SnotifyStyle) {\n  SnotifyStyle[\"simple\"] = \"simple\";\n  SnotifyStyle[\"success\"] = \"success\";\n  SnotifyStyle[\"error\"] = \"error\";\n  SnotifyStyle[\"warning\"] = \"warning\";\n  SnotifyStyle[\"info\"] = \"info\";\n  SnotifyStyle[\"async\"] = \"async\";\n  SnotifyStyle[\"confirm\"] = \"confirm\";\n  SnotifyStyle[\"prompt\"] = \"prompt\";\n})(SnotifyStyle || (SnotifyStyle = {}));\n\n/**\r\n * Transform arguments to Snotify object\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns Snotify\r\n */\nfunction TransformArgument(target, propertyKey, descriptor) {\n  if (propertyKey === SnotifyStyle.async) {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 2) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null,\n            action: args[1]\n          };\n        } else if (args.length === 3) {\n          if (typeof args[1] === 'string') {\n            result = {\n              title: args[1],\n              body: args[0],\n              config: null,\n              action: args[2]\n            };\n          } else {\n            result = {\n              title: null,\n              body: args[0],\n              config: args[2],\n              action: args[1]\n            };\n          }\n        } else {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[3],\n            action: args[2]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  } else {\n    return {\n      value(...args) {\n        let result;\n        if (args.length === 1) {\n          result = {\n            title: null,\n            body: args[0],\n            config: null\n          };\n        } else if (args.length === 3) {\n          result = {\n            title: args[1],\n            body: args[0],\n            config: args[2]\n          };\n        } else {\n          result = {\n            title: null,\n            config: null,\n            body: args[0],\n            [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\n          };\n        }\n        return descriptor.value.apply(this, [result]);\n      }\n    };\n  }\n}\n\n/**\r\n * Generates random id\r\n * @return number\r\n */\nfunction uuid() {\n  return Math.floor(Math.random() * (Date.now() - 1)) + 1;\n}\n/**\r\n * Simple is object check.\r\n * @param item Object<any>\r\n * @returns boolean\r\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\r\n * Deep merge objects.\r\n * @param sources Array<Object<any>>\r\n * @returns Object<any>\r\n */\nfunction mergeDeep(...sources) {\n  const target = {};\n  if (!sources.length) {\n    return target;\n  }\n  while (sources.length > 0) {\n    const source = sources.shift();\n    if (isObject(source)) {\n      for (const key in source) {\n        if (isObject(source[key])) {\n          target[key] = mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(target, {\n            [key]: source[key]\n          });\n        }\n      }\n    }\n  }\n  return target;\n}\nfunction animate(start, duration, callback) {\n  let endTime;\n  requestAnimationFrame(timestamp => endTime = timestamp + duration);\n  const calculate = () => {\n    requestAnimationFrame(timestamp => {\n      const runtime = timestamp - endTime;\n      const progress = Math.min(runtime / duration, 1) + start;\n      if (runtime < duration) {\n        if (callback(+(100 * progress).toFixed(2), progress)) {\n          calculate();\n        }\n      }\n    });\n  };\n}\n\n/**\r\n * Defines toast style depending on method name\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns value: ((...args: any[]) => any)\r\n */\nfunction SetToastType(target, propertyKey, descriptor) {\n  return {\n    value(...args) {\n      args[0].config = Object.assign(Object.assign({}, args[0].config), {\n        type: propertyKey\n      });\n      return descriptor.value.apply(this, args);\n    }\n  };\n}\n\n// @TODO remove method in observable way\n/**\r\n * Toast main model\r\n */\nclass SnotifyToast {\n  constructor(id, title, body, config) {\n    this.id = id;\n    this.title = title;\n    this.body = body;\n    this.config = config;\n    /**\r\n     * Emits SnotifyEvent\r\n     */\n    this.eventEmitter = new Subject();\n    /**\r\n     * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\r\n     */\n    this.eventsHolder = [];\n    if (this.config.type === SnotifyStyle.prompt) {\n      this.value = '';\n    }\n    this.on('hidden', () => {\n      this.eventsHolder.forEach(subscription => {\n        subscription.unsubscribe();\n      });\n    });\n  }\n  /**\r\n   * Subscribe to toast events\r\n   * @returns this\r\n   * @param event SnotifyEvent\r\n   * @param action (toast: this) => void\r\n   */\n  on(event, action) {\n    this.eventsHolder.push(this.eventEmitter.subscribe(e => {\n      if (e === event) {\n        action(this);\n      }\n    }));\n    return this;\n  }\n  /**\r\n   * Tests if a toast equals this toast.\r\n   * @returns boolean true then equals else false.\r\n   * @param toast SnotifyToast\r\n   */\n  equals(toast) {\n    return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\n  }\n}\n\n/**\r\n * SnotifyService - create, remove, config toasts\r\n */\nlet SnotifyService =\n// tslint:disable:unified-signatures\nclass SnotifyService {\n  constructor(config) {\n    this.config = config;\n    this.emitter = new Subject();\n    this.toastChanged = new Subject();\n    this.toastDeleted = new Subject();\n    this.notifications = [];\n  }\n  /**\r\n   * emit changes in notifications array\r\n   */\n  emit() {\n    this.emitter.next(this.notifications.slice());\n  }\n  /**\r\n   * returns SnotifyToast object\r\n   * @param id Number\r\n   * @return SnotifyToast|undefined\r\n   */\n  get(id) {\n    return this.notifications.find(toast => toast.id === id);\n  }\n  /**\r\n   * add SnotifyToast to notifications array\r\n   * @param toast SnotifyToast\r\n   */\n  add(toast) {\n    if (this.config.global.filterDuplicates && this.containsToast(toast)) {\n      return;\n    }\n    if (this.config.global.newOnTop) {\n      this.notifications.unshift(toast);\n    } else {\n      this.notifications.push(toast);\n    }\n    this.emit();\n  }\n  /**\r\n   * checks if the toast is in the collection.\r\n   * @param inToast SnotifyToast\r\n   * @returns boolean\r\n   */\n  containsToast(inToast) {\n    return this.notifications.some(toast => toast.equals(inToast));\n  }\n  /**\r\n   * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\r\n   * @param id number\r\n   * @param remove boolean\r\n   */\n  remove(id, remove) {\n    if (!id) {\n      return this.clear();\n    } else if (remove) {\n      this.notifications = this.notifications.filter(toast => toast.id !== id);\n      return this.emit();\n    }\n    this.toastDeleted.next(id);\n  }\n  /**\r\n   * Clear notifications array\r\n   */\n  clear() {\n    this.notifications = [];\n    this.emit();\n  }\n  /**\r\n   * Creates toast and add it to array, returns toast id\r\n   * @param snotify Snotify\r\n   * @return number\r\n   */\n  create(snotify) {\n    const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\n    const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\n    this.add(toast);\n    return toast;\n  }\n  setDefaults(defaults) {\n    return this.config = mergeDeep(this.config, defaults);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  simple(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  success(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  error(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  info(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  warning(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  confirm(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  prompt(args) {\n    return this.create(args);\n  }\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\n  async(args) {\n    let async;\n    if (args.action instanceof Promise) {\n      async = from(args.action);\n    } else {\n      async = args.action;\n    }\n    const toast = this.create(args);\n    toast.on('mounted', () => {\n      const subscription = async.subscribe(next => {\n        this.mergeToast(toast, next);\n      }, error => {\n        this.mergeToast(toast, error, SnotifyStyle.error);\n        subscription.unsubscribe();\n      }, () => {\n        this.mergeToast(toast, {}, SnotifyStyle.success);\n        subscription.unsubscribe();\n      });\n    });\n    return toast;\n  }\n  mergeToast(toast, next, type) {\n    if (next.body) {\n      toast.body = next.body;\n    }\n    if (next.title) {\n      toast.title = next.title;\n    }\n    if (type) {\n      toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], {\n        type\n      }, next.config);\n    } else {\n      toast.config = mergeDeep(toast.config, next.config);\n    }\n    if (next.html) {\n      toast.config.html = next.html;\n    }\n    this.emit();\n    this.toastChanged.next(toast);\n  }\n  /**\r\n   * Creates empty toast with html string inside\r\n   * @param html string | SafeHtml\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\n  html(html, config) {\n    return this.create({\n      title: null,\n      body: null,\n      config: Object.assign(Object.assign({}, config), {\n        html\n      })\n    });\n  }\n};\nSnotifyService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['SnotifyToastConfig']\n  }]\n}];\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"simple\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"success\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"error\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"info\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"warning\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"confirm\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"prompt\", null);\n__decorate([TransformArgument\n/**\r\n * Determines current toast type and collects default configuration\r\n */, SetToastType], SnotifyService.prototype, \"async\", null);\nSnotifyService = __decorate([Injectable()\n// tslint:disable:unified-signatures\n, __param(0, Inject('SnotifyToastConfig'))], SnotifyService);\nlet ButtonsComponent =\n/**\r\n * Buttons component\r\n */\nclass ButtonsComponent {\n  constructor(service) {\n    this.service = service;\n  }\n  /**\r\n   * remove toast\r\n   */\n  remove() {\n    this.service.remove(this.toast.id);\n  }\n};\nButtonsComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\n__decorate([Input()], ButtonsComponent.prototype, \"toast\", void 0);\nButtonsComponent = __decorate([Component({\n  selector: 'ng-snotify-button',\n  template: \"<div class=\\\"snotifyToast__buttons\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    *ngFor=\\\"let button of toast.config.buttons\\\"\\r\\n    [ngClass]=\\\"{ 'snotifyToast__buttons--bold': button.bold }\\\"\\r\\n    (click)=\\\"button.action ? button.action(toast) : remove()\\\"\\r\\n  >\\r\\n    {{ button.text }}\\r\\n  </button>\\r\\n</div>\\r\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n/**\r\n * Buttons component\r\n */], ButtonsComponent);\nlet PromptComponent =\n/**\r\n * Prompt component. Part of PROMPT type\r\n */\nclass PromptComponent {\n  constructor() {\n    /**\r\n     * Is PROMPT focused\r\n     */\n    this.isPromptFocused = false;\n  }\n};\n__decorate([Input()], PromptComponent.prototype, \"toast\", void 0);\nPromptComponent = __decorate([Component({\n  selector: 'ng-snotify-prompt',\n  template: \"<span class=\\\"snotifyToast__input\\\" [ngClass]=\\\"{ 'snotifyToast__input--filled': isPromptFocused }\\\">\\r\\n  <input\\r\\n    (input)=\\\"toast.value = $event.target.value; toast.eventEmitter.next('input')\\\"\\r\\n    autofocus\\r\\n    class=\\\"snotifyToast__input__field\\\"\\r\\n    type=\\\"text\\\"\\r\\n    [id]=\\\"toast.id\\\"\\r\\n    (focus)=\\\"isPromptFocused = true\\\"\\r\\n    (blur)=\\\"isPromptFocused = !!toast.value.length\\\"\\r\\n  />\\r\\n  <label class=\\\"snotifyToast__input__label\\\" [for]=\\\"toast.id\\\">\\r\\n    <span class=\\\"snotifyToast__input__labelContent\\\">{{ toast.config.placeholder | truncate }}</span>\\r\\n  </label>\\r\\n</span>\\r\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n/**\r\n * Prompt component. Part of PROMPT type\r\n */], PromptComponent);\n\n/**\r\n * Toast position\r\n */\nvar SnotifyPosition;\n(function (SnotifyPosition) {\n  SnotifyPosition[\"leftTop\"] = \"leftTop\";\n  SnotifyPosition[\"leftCenter\"] = \"leftCenter\";\n  SnotifyPosition[\"leftBottom\"] = \"leftBottom\";\n  SnotifyPosition[\"rightTop\"] = \"rightTop\";\n  SnotifyPosition[\"rightCenter\"] = \"rightCenter\";\n  SnotifyPosition[\"rightBottom\"] = \"rightBottom\";\n  SnotifyPosition[\"centerTop\"] = \"centerTop\";\n  SnotifyPosition[\"centerCenter\"] = \"centerCenter\";\n  SnotifyPosition[\"centerBottom\"] = \"centerBottom\";\n})(SnotifyPosition || (SnotifyPosition = {}));\nlet SnotifyComponent = class SnotifyComponent {\n  constructor(service) {\n    this.service = service;\n    /**\r\n     * Backdrop Opacity\r\n     */\n    this.backdrop = -1;\n  }\n  /**\r\n   * Init base options. Subscribe to options, lifecycle change\r\n   */\n  ngOnInit() {\n    this.emitter = this.service.emitter.subscribe(toasts => {\n      if (this.service.config.global.newOnTop) {\n        this.dockSizeA = -this.service.config.global.maxOnScreen;\n        this.dockSizeB = undefined;\n        this.blockSizeA = -this.service.config.global.maxAtPosition;\n        this.blockSizeB = undefined;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\n      } else {\n        this.dockSizeA = 0;\n        this.dockSizeB = this.service.config.global.maxOnScreen;\n        this.blockSizeA = 0;\n        this.blockSizeB = this.service.config.global.maxAtPosition;\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\n      }\n      this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\n      this.stateChanged('mounted');\n    });\n  }\n  // TODO: fix backdrop if more than one toast called in a row\n  /**\r\n   * Changes the backdrop opacity\r\n   * @param event SnotifyEvent\r\n   */\n  stateChanged(event) {\n    if (!this.withBackdrop.length) {\n      if (this.backdrop >= 0) {\n        this.backdrop = -1;\n      }\n      return;\n    }\n    switch (event) {\n      case 'mounted':\n        if (this.backdrop < 0) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'beforeShow':\n        this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\n        break;\n      case 'beforeHide':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = 0;\n        }\n        break;\n      case 'hidden':\n        if (this.withBackdrop.length === 1) {\n          this.backdrop = -1;\n        }\n        break;\n    }\n  }\n  /**\r\n   * Split toasts toasts into different objects\r\n   * @param toasts SnotifyToast[]\r\n   * @returns SnotifyNotifications\r\n   */\n  splitToasts(toasts) {\n    const result = {};\n    for (const property in SnotifyPosition) {\n      if (SnotifyPosition.hasOwnProperty(property)) {\n        result[SnotifyPosition[property]] = [];\n      }\n    }\n    toasts.forEach(toast => {\n      result[toast.config.position].push(toast);\n    });\n    return result;\n  }\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\n  ngOnDestroy() {\n    this.emitter.unsubscribe();\n  }\n};\nSnotifyComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\nSnotifyComponent = __decorate([Component({\n  selector: 'ng-snotify',\n  template: \"<div class=\\\"snotify-backdrop\\\" *ngIf=\\\"backdrop >= 0\\\" [style.opacity]=\\\"backdrop\\\"></div>\\r\\n<div *ngFor=\\\"let position of notifications | keys\\\" class=\\\"snotify snotify-{{ position }}\\\">\\r\\n  <ng-snotify-toast\\r\\n    *ngFor=\\\"let notification of notifications[position] | slice: blockSizeA:blockSizeB\\\"\\r\\n    [toast]=\\\"notification\\\"\\r\\n    (stateChanged)=\\\"stateChanged($event)\\\"\\r\\n  >\\r\\n  </ng-snotify-toast>\\r\\n</div>\\r\\n\",\n  encapsulation: ViewEncapsulation.None\n})], SnotifyComponent);\nlet ToastComponent = class ToastComponent {\n  constructor(service) {\n    this.service = service;\n    this.stateChanged = new EventEmitter();\n    /**\r\n     * Toast state\r\n     */\n    this.state = {\n      paused: false,\n      progress: 0,\n      animation: '',\n      isDestroying: false,\n      promptType: SnotifyStyle.prompt\n    };\n  }\n  // Lifecycles\n  /**\r\n   * Init base options. Subscribe to toast changed, toast deleted\r\n   */\n  ngOnInit() {\n    this.toastChangedSubscription = this.service.toastChanged.subscribe(toast => {\n      if (this.toast.id === toast.id) {\n        this.initToast();\n      }\n    });\n    this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\n      if (this.toast.id === id) {\n        this.onRemove();\n      }\n    });\n    if (!this.toast.config.timeout) {\n      this.toast.config.showProgressBar = false;\n    }\n    this.toast.eventEmitter.next('mounted');\n    this.state.animation = 'snotifyToast--in';\n  }\n  ngAfterContentInit() {\n    setTimeout(() => {\n      this.stateChanged.emit('beforeShow');\n      this.toast.eventEmitter.next('beforeShow');\n      this.state.animation = this.toast.config.animation.enter;\n    }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\n  }\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationFrame);\n    this.toast.eventEmitter.next('destroyed');\n    this.toastChangedSubscription.unsubscribe();\n    this.toastDeletedSubscription.unsubscribe();\n  }\n  /*\r\n  Event hooks\r\n   */\n  /**\r\n   * Trigger OnClick lifecycle\r\n   */\n  onClick() {\n    this.toast.eventEmitter.next('click');\n    if (this.toast.config.closeOnClick) {\n      this.service.remove(this.toast.id);\n    }\n  }\n  /**\r\n   * Trigger beforeDestroy lifecycle. Removes toast\r\n   */\n  onRemove() {\n    this.state.isDestroying = true;\n    this.toast.eventEmitter.next('beforeHide');\n    this.stateChanged.emit('beforeHide');\n    this.state.animation = this.toast.config.animation.exit;\n    setTimeout(() => {\n      this.stateChanged.emit('hidden');\n      this.state.animation = 'snotifyToast--out';\n      this.toast.eventEmitter.next('hidden');\n      setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\n    }, this.toast.config.animation.time / 2);\n  }\n  /**\r\n   * Trigger onHoverEnter lifecycle\r\n   */\n  onMouseEnter() {\n    this.toast.eventEmitter.next('mouseenter');\n    if (this.toast.config.pauseOnHover) {\n      this.state.paused = true;\n    }\n  }\n  /**\r\n   * Trigger onHoverLeave lifecycle\r\n   */\n  onMouseLeave() {\n    if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\n      this.state.paused = false;\n      this.startTimeout(this.toast.config.timeout * this.state.progress);\n    }\n    this.toast.eventEmitter.next('mouseleave');\n  }\n  /**\r\n   * Remove toast completely after animation\r\n   */\n  onExitTransitionEnd() {\n    if (this.state.isDestroying) {\n      return;\n    }\n    this.initToast();\n    this.toast.eventEmitter.next('shown');\n  }\n  /*\r\n   Common\r\n   */\n  /**\r\n   * Initialize base toast config\r\n   *\r\n   */\n  initToast() {\n    if (this.toast.config.timeout > 0) {\n      this.startTimeout(0);\n    }\n  }\n  /**\r\n   * Start progress bar\r\n   * @param startTime number\r\n   */\n  startTimeout(startTime = 0) {\n    const start = performance.now();\n    const calculate = () => {\n      this.animationFrame = requestAnimationFrame(timestamp => {\n        const runtime = timestamp + startTime - start;\n        const progress = Math.min(runtime / this.toast.config.timeout, 1);\n        if (this.state.paused) {\n          cancelAnimationFrame(this.animationFrame);\n        } else if (runtime < this.toast.config.timeout) {\n          this.state.progress = progress;\n          calculate();\n        } else {\n          this.state.progress = 1;\n          cancelAnimationFrame(this.animationFrame);\n          this.service.remove(this.toast.id);\n        }\n      });\n    };\n    calculate();\n  }\n};\nToastComponent.ctorParameters = () => [{\n  type: SnotifyService\n}];\n__decorate([Input()], ToastComponent.prototype, \"toast\", void 0);\n__decorate([Output()], ToastComponent.prototype, \"stateChanged\", void 0);\nToastComponent = __decorate([Component({\n  selector: 'ng-snotify-toast',\n  template: \"<div\\r\\n  [attr.role]=\\\"toast.config.type === state.promptType ? 'dialog' : 'alert'\\\"\\r\\n  [attr.aria-labelledby]=\\\"'snotify_' + toast.id\\\"\\r\\n  [attr.aria-modal]=\\\"toast.config.type === state.promptType\\\"\\r\\n  [ngClass]=\\\"[\\r\\n    'snotifyToast animated',\\r\\n    'snotify-' + toast.config.type,\\r\\n    state.animation,\\r\\n    toast.valid === undefined ? '' : toast.valid ? 'snotifyToast--valid' : 'snotifyToast--invalid'\\r\\n  ]\\\"\\r\\n  [ngStyle]=\\\"{\\r\\n    '-webkit-transition': toast.config.animation.time + 'ms',\\r\\n    transition: toast.config.animation.time + 'ms',\\r\\n    '-webkit-animation-duration': toast.config.animation.time + 'ms',\\r\\n    'animation-duration': toast.config.animation.time + 'ms'\\r\\n  }\\\"\\r\\n  (animationend)=\\\"onExitTransitionEnd()\\\"\\r\\n  (click)=\\\"onClick()\\\"\\r\\n  (mouseenter)=\\\"onMouseEnter()\\\"\\r\\n  (mouseleave)=\\\"onMouseLeave()\\\"\\r\\n>\\r\\n  <div class=\\\"snotifyToast__progressBar\\\" *ngIf=\\\"toast.config.showProgressBar\\\">\\r\\n    <span class=\\\"snotifyToast__progressBar__percentage\\\" [ngStyle]=\\\"{ width: state.progress * 100 + '%' }\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"snotifyToast__inner\\\" *ngIf=\\\"!toast.config.html; else toastHTML\\\">\\r\\n    <div class=\\\"snotifyToast__title\\\" [attr.id]=\\\"'snotify_' + toast.id\\\" *ngIf=\\\"toast.title\\\">\\r\\n      {{ toast.title | truncate: toast.config.titleMaxLength }}\\r\\n    </div>\\r\\n    <div class=\\\"snotifyToast__body\\\" *ngIf=\\\"toast.body\\\">{{ toast.body | truncate: toast.config.bodyMaxLength }}</div>\\r\\n    <ng-snotify-prompt *ngIf=\\\"toast.config.type === state.promptType\\\" [toast]=\\\"toast\\\"> </ng-snotify-prompt>\\r\\n    <div\\r\\n      *ngIf=\\\"!toast.config.icon; else elseBlock\\\"\\r\\n      [ngClass]=\\\"['snotify-icon', toast.config.iconClass || 'snotify-icon--' + toast.config.type]\\\"\\r\\n    ></div>\\r\\n    <ng-template #elseBlock>\\r\\n      <img class=\\\"snotify-icon\\\" [src]=\\\"toast.config.icon\\\" />\\r\\n    </ng-template>\\r\\n  </div>\\r\\n  <ng-template #toastHTML>\\r\\n    <div class=\\\"snotifyToast__inner\\\" [innerHTML]=\\\"toast.config.html\\\"></div>\\r\\n  </ng-template>\\r\\n  <ng-snotify-button *ngIf=\\\"toast.config.buttons\\\" [toast]=\\\"toast\\\"></ng-snotify-button>\\r\\n</div>\\r\\n\",\n  encapsulation: ViewEncapsulation.None\n})], ToastComponent);\nlet KeysPipe =\n/**\r\n * Extract object keys pipe\r\n */\nclass KeysPipe {\n  transform(value, args = null) {\n    if (!value) {\n      return value;\n    }\n    return Object.keys(value);\n  }\n};\nKeysPipe = __decorate([Pipe({\n  name: 'keys',\n  pure: false\n})\n/**\r\n * Extract object keys pipe\r\n */], KeysPipe);\nlet TruncatePipe =\n/**\r\n * Truncate toast text pipe\r\n */\nclass TruncatePipe {\n  transform(value, ...args) {\n    let limit = 40;\n    let trail = '...';\n    if (args.length > 0) {\n      limit = args.length > 0 ? parseInt(args[0], 10) : limit;\n      trail = args.length > 1 ? args[1] : trail;\n    }\n    return value.length > limit ? value.substring(0, limit) + trail : value;\n  }\n};\nTruncatePipe = __decorate([Pipe({\n  name: 'truncate'\n})\n/**\r\n * Truncate toast text pipe\r\n */], TruncatePipe);\nvar SnotifyModule_1;\nlet SnotifyModule = SnotifyModule_1 = class SnotifyModule {\n  static forRoot() {\n    return {\n      ngModule: SnotifyModule_1,\n      providers: [SnotifyService]\n    };\n  }\n};\nSnotifyModule = SnotifyModule_1 = __decorate([NgModule({\n  imports: [CommonModule],\n  declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\n  exports: [SnotifyComponent, TruncatePipe, KeysPipe]\n})], SnotifyModule);\n\n/**\r\n * Snotify default configuration object\r\n */\nconst ToastDefaults = {\n  global: {\n    newOnTop: true,\n    maxOnScreen: 8,\n    maxAtPosition: 8,\n    filterDuplicates: false\n  },\n  toast: {\n    type: SnotifyStyle.simple,\n    showProgressBar: true,\n    timeout: 2000,\n    closeOnClick: true,\n    pauseOnHover: true,\n    bodyMaxLength: 150,\n    titleMaxLength: 16,\n    backdrop: -1,\n    icon: null,\n    iconClass: null,\n    html: null,\n    position: SnotifyPosition.rightBottom,\n    animation: {\n      enter: 'fadeIn',\n      exit: 'fadeOut',\n      time: 400\n    }\n  },\n  type: {\n    [SnotifyStyle.prompt]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      placeholder: 'Enter answer here...',\n      type: SnotifyStyle.prompt\n    },\n    [SnotifyStyle.confirm]: {\n      timeout: 0,\n      closeOnClick: false,\n      buttons: [{\n        text: 'Ok',\n        action: null,\n        bold: true\n      }, {\n        text: 'Cancel',\n        action: null,\n        bold: false\n      }],\n      type: SnotifyStyle.confirm\n    },\n    [SnotifyStyle.simple]: {\n      type: SnotifyStyle.simple\n    },\n    [SnotifyStyle.success]: {\n      type: SnotifyStyle.success\n    },\n    [SnotifyStyle.error]: {\n      type: SnotifyStyle.error\n    },\n    [SnotifyStyle.warning]: {\n      type: SnotifyStyle.warning\n    },\n    [SnotifyStyle.info]: {\n      type: SnotifyStyle.info\n    },\n    [SnotifyStyle.async]: {\n      pauseOnHover: false,\n      closeOnClick: false,\n      timeout: 0,\n      showProgressBar: false,\n      type: SnotifyStyle.async\n    }\n  }\n};\n\n/*\r\n * Public API Surface of ng-snotify\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonsComponent, KeysPipe, PromptComponent, SnotifyComponent, SnotifyModule, SnotifyPosition, SnotifyService, SnotifyStyle, SnotifyToast, ToastComponent, ToastDefaults, TruncatePipe, SnotifyComponent as ɵa, SnotifyService as ɵb, TransformArgument as ɵd, SetToastType as ɵe, ToastComponent as ɵf, TruncatePipe as ɵg, ButtonsComponent as ɵh, PromptComponent as ɵi, KeysPipe as ɵj };","map":{"version":3,"names":["__decorate","__param","Inject","Injectable","Input","Component","ChangeDetectionStrategy","ViewEncapsulation","EventEmitter","Output","Pipe","NgModule","Subject","from","CommonModule","SnotifyStyle","TransformArgument","target","propertyKey","descriptor","async","value","args","result","length","title","body","config","action","apply","uuid","Math","floor","random","Date","now","isObject","item","Array","isArray","mergeDeep","sources","source","shift","key","Object","assign","animate","start","duration","callback","endTime","requestAnimationFrame","timestamp","calculate","runtime","progress","min","toFixed","SetToastType","type","SnotifyToast","constructor","id","eventEmitter","eventsHolder","prompt","on","forEach","subscription","unsubscribe","event","push","subscribe","e","equals","toast","SnotifyService","emitter","toastChanged","toastDeleted","notifications","emit","next","slice","get","find","add","global","filterDuplicates","containsToast","newOnTop","unshift","inToast","some","remove","clear","filter","create","snotify","setDefaults","defaults","simple","success","error","info","warning","confirm","Promise","mergeToast","html","ctorParameters","undefined","decorators","prototype","ButtonsComponent","service","selector","template","changeDetection","OnPush","encapsulation","None","PromptComponent","isPromptFocused","SnotifyPosition","SnotifyComponent","backdrop","ngOnInit","toasts","dockSizeA","maxOnScreen","dockSizeB","blockSizeA","maxAtPosition","blockSizeB","withBackdrop","reverse","splitToasts","stateChanged","property","hasOwnProperty","position","ngOnDestroy","ToastComponent","state","paused","animation","isDestroying","promptType","toastChangedSubscription","initToast","toastDeletedSubscription","onRemove","timeout","showProgressBar","ngAfterContentInit","setTimeout","enter","time","cancelAnimationFrame","animationFrame","onClick","closeOnClick","exit","onMouseEnter","pauseOnHover","onMouseLeave","startTimeout","onExitTransitionEnd","startTime","performance","KeysPipe","transform","keys","name","pure","TruncatePipe","limit","trail","parseInt","substring","SnotifyModule_1","SnotifyModule","forRoot","ngModule","providers","imports","declarations","exports","ToastDefaults","bodyMaxLength","titleMaxLength","icon","iconClass","rightBottom","buttons","text","bold","placeholder","ɵa","ɵb","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj"],"sources":["D:/Projects/Portfolio/portfolio/node_modules/ng-snotify/fesm2015/ng-snotify.js"],"sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Inject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, Output, Pipe, NgModule } from '@angular/core';\nimport { Subject, from } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * Toast style.\r\n */\r\nvar SnotifyStyle;\r\n(function (SnotifyStyle) {\r\n    SnotifyStyle[\"simple\"] = \"simple\";\r\n    SnotifyStyle[\"success\"] = \"success\";\r\n    SnotifyStyle[\"error\"] = \"error\";\r\n    SnotifyStyle[\"warning\"] = \"warning\";\r\n    SnotifyStyle[\"info\"] = \"info\";\r\n    SnotifyStyle[\"async\"] = \"async\";\r\n    SnotifyStyle[\"confirm\"] = \"confirm\";\r\n    SnotifyStyle[\"prompt\"] = \"prompt\";\r\n})(SnotifyStyle || (SnotifyStyle = {}));\n\n/**\r\n * Transform arguments to Snotify object\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns Snotify\r\n */\r\nfunction TransformArgument(target, propertyKey, descriptor) {\r\n    if (propertyKey === SnotifyStyle.async) {\r\n        return {\r\n            value(...args) {\r\n                let result;\r\n                if (args.length === 2) {\r\n                    result = {\r\n                        title: null,\r\n                        body: args[0],\r\n                        config: null,\r\n                        action: args[1]\r\n                    };\r\n                }\r\n                else if (args.length === 3) {\r\n                    if (typeof args[1] === 'string') {\r\n                        result = {\r\n                            title: args[1],\r\n                            body: args[0],\r\n                            config: null,\r\n                            action: args[2]\r\n                        };\r\n                    }\r\n                    else {\r\n                        result = {\r\n                            title: null,\r\n                            body: args[0],\r\n                            config: args[2],\r\n                            action: args[1]\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    result = {\r\n                        title: args[1],\r\n                        body: args[0],\r\n                        config: args[3],\r\n                        action: args[2]\r\n                    };\r\n                }\r\n                return descriptor.value.apply(this, [result]);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            value(...args) {\r\n                let result;\r\n                if (args.length === 1) {\r\n                    result = {\r\n                        title: null,\r\n                        body: args[0],\r\n                        config: null\r\n                    };\r\n                }\r\n                else if (args.length === 3) {\r\n                    result = {\r\n                        title: args[1],\r\n                        body: args[0],\r\n                        config: args[2]\r\n                    };\r\n                }\r\n                else {\r\n                    result = {\r\n                        title: null,\r\n                        config: null,\r\n                        body: args[0],\r\n                        [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\r\n                    };\r\n                }\r\n                return descriptor.value.apply(this, [result]);\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * Generates random id\r\n * @return number\r\n */\r\nfunction uuid() {\r\n    return Math.floor(Math.random() * (Date.now() - 1)) + 1;\r\n}\r\n/**\r\n * Simple is object check.\r\n * @param item Object<any>\r\n * @returns boolean\r\n */\r\nfunction isObject(item) {\r\n    return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n/**\r\n * Deep merge objects.\r\n * @param sources Array<Object<any>>\r\n * @returns Object<any>\r\n */\r\nfunction mergeDeep(...sources) {\r\n    const target = {};\r\n    if (!sources.length) {\r\n        return target;\r\n    }\r\n    while (sources.length > 0) {\r\n        const source = sources.shift();\r\n        if (isObject(source)) {\r\n            for (const key in source) {\r\n                if (isObject(source[key])) {\r\n                    target[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n                else {\r\n                    Object.assign(target, { [key]: source[key] });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nfunction animate(start, duration, callback) {\r\n    let endTime;\r\n    requestAnimationFrame(timestamp => (endTime = timestamp + duration));\r\n    const calculate = () => {\r\n        requestAnimationFrame(timestamp => {\r\n            const runtime = timestamp - endTime;\r\n            const progress = Math.min(runtime / duration, 1) + start;\r\n            if (runtime < duration) {\r\n                if (callback(+(100 * progress).toFixed(2), progress)) {\r\n                    calculate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n}\n\n/**\r\n * Defines toast style depending on method name\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns value: ((...args: any[]) => any)\r\n */\r\nfunction SetToastType(target, propertyKey, descriptor) {\r\n    return {\r\n        value(...args) {\r\n            args[0].config = Object.assign(Object.assign({}, args[0].config), { type: propertyKey });\r\n            return descriptor.value.apply(this, args);\r\n        }\r\n    };\r\n}\n\n// @TODO remove method in observable way\r\n/**\r\n * Toast main model\r\n */\r\nclass SnotifyToast {\r\n    constructor(id, title, body, config) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.body = body;\r\n        this.config = config;\r\n        /**\r\n         * Emits SnotifyEvent\r\n         */\r\n        this.eventEmitter = new Subject();\r\n        /**\r\n         * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\r\n         */\r\n        this.eventsHolder = [];\r\n        if (this.config.type === SnotifyStyle.prompt) {\r\n            this.value = '';\r\n        }\r\n        this.on('hidden', () => {\r\n            this.eventsHolder.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Subscribe to toast events\r\n     * @returns this\r\n     * @param event SnotifyEvent\r\n     * @param action (toast: this) => void\r\n     */\r\n    on(event, action) {\r\n        this.eventsHolder.push(this.eventEmitter.subscribe((e) => {\r\n            if (e === event) {\r\n                action(this);\r\n            }\r\n        }));\r\n        return this;\r\n    }\r\n    /**\r\n     * Tests if a toast equals this toast.\r\n     * @returns boolean true then equals else false.\r\n     * @param toast SnotifyToast\r\n     */\r\n    equals(toast) {\r\n        return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\r\n    }\r\n}\n\n/**\r\n * SnotifyService - create, remove, config toasts\r\n */\r\nlet SnotifyService = \r\n// tslint:disable:unified-signatures\r\nclass SnotifyService {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.emitter = new Subject();\r\n        this.toastChanged = new Subject();\r\n        this.toastDeleted = new Subject();\r\n        this.notifications = [];\r\n    }\r\n    /**\r\n     * emit changes in notifications array\r\n     */\r\n    emit() {\r\n        this.emitter.next(this.notifications.slice());\r\n    }\r\n    /**\r\n     * returns SnotifyToast object\r\n     * @param id Number\r\n     * @return SnotifyToast|undefined\r\n     */\r\n    get(id) {\r\n        return this.notifications.find(toast => toast.id === id);\r\n    }\r\n    /**\r\n     * add SnotifyToast to notifications array\r\n     * @param toast SnotifyToast\r\n     */\r\n    add(toast) {\r\n        if (this.config.global.filterDuplicates && this.containsToast(toast)) {\r\n            return;\r\n        }\r\n        if (this.config.global.newOnTop) {\r\n            this.notifications.unshift(toast);\r\n        }\r\n        else {\r\n            this.notifications.push(toast);\r\n        }\r\n        this.emit();\r\n    }\r\n    /**\r\n     * checks if the toast is in the collection.\r\n     * @param inToast SnotifyToast\r\n     * @returns boolean\r\n     */\r\n    containsToast(inToast) {\r\n        return this.notifications.some(toast => toast.equals(inToast));\r\n    }\r\n    /**\r\n     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\r\n     * @param id number\r\n     * @param remove boolean\r\n     */\r\n    remove(id, remove) {\r\n        if (!id) {\r\n            return this.clear();\r\n        }\r\n        else if (remove) {\r\n            this.notifications = this.notifications.filter(toast => toast.id !== id);\r\n            return this.emit();\r\n        }\r\n        this.toastDeleted.next(id);\r\n    }\r\n    /**\r\n     * Clear notifications array\r\n     */\r\n    clear() {\r\n        this.notifications = [];\r\n        this.emit();\r\n    }\r\n    /**\r\n     * Creates toast and add it to array, returns toast id\r\n     * @param snotify Snotify\r\n     * @return number\r\n     */\r\n    create(snotify) {\r\n        const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\r\n        const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\r\n        this.add(toast);\r\n        return toast;\r\n    }\r\n    setDefaults(defaults) {\r\n        return (this.config = mergeDeep(this.config, defaults));\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    simple(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    success(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    error(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    info(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    warning(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    confirm(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    prompt(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    async(args) {\r\n        let async;\r\n        if (args.action instanceof Promise) {\r\n            async = from(args.action);\r\n        }\r\n        else {\r\n            async = args.action;\r\n        }\r\n        const toast = this.create(args);\r\n        toast.on('mounted', () => {\r\n            const subscription = async.subscribe((next) => {\r\n                this.mergeToast(toast, next);\r\n            }, (error) => {\r\n                this.mergeToast(toast, error, SnotifyStyle.error);\r\n                subscription.unsubscribe();\r\n            }, () => {\r\n                this.mergeToast(toast, {}, SnotifyStyle.success);\r\n                subscription.unsubscribe();\r\n            });\r\n        });\r\n        return toast;\r\n    }\r\n    mergeToast(toast, next, type) {\r\n        if (next.body) {\r\n            toast.body = next.body;\r\n        }\r\n        if (next.title) {\r\n            toast.title = next.title;\r\n        }\r\n        if (type) {\r\n            toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], { type }, next.config);\r\n        }\r\n        else {\r\n            toast.config = mergeDeep(toast.config, next.config);\r\n        }\r\n        if (next.html) {\r\n            toast.config.html = next.html;\r\n        }\r\n        this.emit();\r\n        this.toastChanged.next(toast);\r\n    }\r\n    /**\r\n     * Creates empty toast with html string inside\r\n     * @param html string | SafeHtml\r\n     * @param config SnotifyToastConfig\r\n     * @returns number\r\n     */\r\n    html(html, config) {\r\n        return this.create({\r\n            title: null,\r\n            body: null,\r\n            config: Object.assign(Object.assign({}, config), { html })\r\n        });\r\n    }\r\n};\r\nSnotifyService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: ['SnotifyToastConfig',] }] }\r\n];\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"simple\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"success\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"error\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"info\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"warning\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"confirm\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"prompt\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"async\", null);\r\nSnotifyService = __decorate([\r\n    Injectable()\r\n    // tslint:disable:unified-signatures\r\n    ,\r\n    __param(0, Inject('SnotifyToastConfig'))\r\n], SnotifyService);\n\nlet ButtonsComponent = \r\n/**\r\n * Buttons component\r\n */\r\nclass ButtonsComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n    }\r\n    /**\r\n     * remove toast\r\n     */\r\n    remove() {\r\n        this.service.remove(this.toast.id);\r\n    }\r\n};\r\nButtonsComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\r\n__decorate([\r\n    Input()\r\n], ButtonsComponent.prototype, \"toast\", void 0);\r\nButtonsComponent = __decorate([\r\n    Component({\r\n        selector: 'ng-snotify-button',\r\n        template: \"<div class=\\\"snotifyToast__buttons\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    *ngFor=\\\"let button of toast.config.buttons\\\"\\r\\n    [ngClass]=\\\"{ 'snotifyToast__buttons--bold': button.bold }\\\"\\r\\n    (click)=\\\"button.action ? button.action(toast) : remove()\\\"\\r\\n  >\\r\\n    {{ button.text }}\\r\\n  </button>\\r\\n</div>\\r\\n\",\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        encapsulation: ViewEncapsulation.None\r\n    })\r\n    /**\r\n     * Buttons component\r\n     */\r\n], ButtonsComponent);\n\nlet PromptComponent = \r\n/**\r\n * Prompt component. Part of PROMPT type\r\n */\r\nclass PromptComponent {\r\n    constructor() {\r\n        /**\r\n         * Is PROMPT focused\r\n         */\r\n        this.isPromptFocused = false;\r\n    }\r\n};\r\n__decorate([\r\n    Input()\r\n], PromptComponent.prototype, \"toast\", void 0);\r\nPromptComponent = __decorate([\r\n    Component({\r\n        selector: 'ng-snotify-prompt',\r\n        template: \"<span class=\\\"snotifyToast__input\\\" [ngClass]=\\\"{ 'snotifyToast__input--filled': isPromptFocused }\\\">\\r\\n  <input\\r\\n    (input)=\\\"toast.value = $event.target.value; toast.eventEmitter.next('input')\\\"\\r\\n    autofocus\\r\\n    class=\\\"snotifyToast__input__field\\\"\\r\\n    type=\\\"text\\\"\\r\\n    [id]=\\\"toast.id\\\"\\r\\n    (focus)=\\\"isPromptFocused = true\\\"\\r\\n    (blur)=\\\"isPromptFocused = !!toast.value.length\\\"\\r\\n  />\\r\\n  <label class=\\\"snotifyToast__input__label\\\" [for]=\\\"toast.id\\\">\\r\\n    <span class=\\\"snotifyToast__input__labelContent\\\">{{ toast.config.placeholder | truncate }}</span>\\r\\n  </label>\\r\\n</span>\\r\\n\",\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        encapsulation: ViewEncapsulation.None\r\n    })\r\n    /**\r\n     * Prompt component. Part of PROMPT type\r\n     */\r\n], PromptComponent);\n\n/**\r\n * Toast position\r\n */\r\nvar SnotifyPosition;\r\n(function (SnotifyPosition) {\r\n    SnotifyPosition[\"leftTop\"] = \"leftTop\";\r\n    SnotifyPosition[\"leftCenter\"] = \"leftCenter\";\r\n    SnotifyPosition[\"leftBottom\"] = \"leftBottom\";\r\n    SnotifyPosition[\"rightTop\"] = \"rightTop\";\r\n    SnotifyPosition[\"rightCenter\"] = \"rightCenter\";\r\n    SnotifyPosition[\"rightBottom\"] = \"rightBottom\";\r\n    SnotifyPosition[\"centerTop\"] = \"centerTop\";\r\n    SnotifyPosition[\"centerCenter\"] = \"centerCenter\";\r\n    SnotifyPosition[\"centerBottom\"] = \"centerBottom\";\r\n})(SnotifyPosition || (SnotifyPosition = {}));\n\nlet SnotifyComponent = class SnotifyComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n        /**\r\n         * Backdrop Opacity\r\n         */\r\n        this.backdrop = -1;\r\n    }\r\n    /**\r\n     * Init base options. Subscribe to options, lifecycle change\r\n     */\r\n    ngOnInit() {\r\n        this.emitter = this.service.emitter.subscribe((toasts) => {\r\n            if (this.service.config.global.newOnTop) {\r\n                this.dockSizeA = -this.service.config.global.maxOnScreen;\r\n                this.dockSizeB = undefined;\r\n                this.blockSizeA = -this.service.config.global.maxAtPosition;\r\n                this.blockSizeB = undefined;\r\n                this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\r\n            }\r\n            else {\r\n                this.dockSizeA = 0;\r\n                this.dockSizeB = this.service.config.global.maxOnScreen;\r\n                this.blockSizeA = 0;\r\n                this.blockSizeB = this.service.config.global.maxAtPosition;\r\n                this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\r\n            }\r\n            this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\r\n            this.stateChanged('mounted');\r\n        });\r\n    }\r\n    // TODO: fix backdrop if more than one toast called in a row\r\n    /**\r\n     * Changes the backdrop opacity\r\n     * @param event SnotifyEvent\r\n     */\r\n    stateChanged(event) {\r\n        if (!this.withBackdrop.length) {\r\n            if (this.backdrop >= 0) {\r\n                this.backdrop = -1;\r\n            }\r\n            return;\r\n        }\r\n        switch (event) {\r\n            case 'mounted':\r\n                if (this.backdrop < 0) {\r\n                    this.backdrop = 0;\r\n                }\r\n                break;\r\n            case 'beforeShow':\r\n                this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\r\n                break;\r\n            case 'beforeHide':\r\n                if (this.withBackdrop.length === 1) {\r\n                    this.backdrop = 0;\r\n                }\r\n                break;\r\n            case 'hidden':\r\n                if (this.withBackdrop.length === 1) {\r\n                    this.backdrop = -1;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Split toasts toasts into different objects\r\n     * @param toasts SnotifyToast[]\r\n     * @returns SnotifyNotifications\r\n     */\r\n    splitToasts(toasts) {\r\n        const result = {};\r\n        for (const property in SnotifyPosition) {\r\n            if (SnotifyPosition.hasOwnProperty(property)) {\r\n                result[SnotifyPosition[property]] = [];\r\n            }\r\n        }\r\n        toasts.forEach((toast) => {\r\n            result[toast.config.position].push(toast);\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * Unsubscribe subscriptions\r\n     */\r\n    ngOnDestroy() {\r\n        this.emitter.unsubscribe();\r\n    }\r\n};\r\nSnotifyComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\r\nSnotifyComponent = __decorate([\r\n    Component({\r\n        selector: 'ng-snotify',\r\n        template: \"<div class=\\\"snotify-backdrop\\\" *ngIf=\\\"backdrop >= 0\\\" [style.opacity]=\\\"backdrop\\\"></div>\\r\\n<div *ngFor=\\\"let position of notifications | keys\\\" class=\\\"snotify snotify-{{ position }}\\\">\\r\\n  <ng-snotify-toast\\r\\n    *ngFor=\\\"let notification of notifications[position] | slice: blockSizeA:blockSizeB\\\"\\r\\n    [toast]=\\\"notification\\\"\\r\\n    (stateChanged)=\\\"stateChanged($event)\\\"\\r\\n  >\\r\\n  </ng-snotify-toast>\\r\\n</div>\\r\\n\",\r\n        encapsulation: ViewEncapsulation.None\r\n    })\r\n], SnotifyComponent);\n\nlet ToastComponent = class ToastComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n        this.stateChanged = new EventEmitter();\r\n        /**\r\n         * Toast state\r\n         */\r\n        this.state = {\r\n            paused: false,\r\n            progress: 0,\r\n            animation: '',\r\n            isDestroying: false,\r\n            promptType: SnotifyStyle.prompt\r\n        };\r\n    }\r\n    // Lifecycles\r\n    /**\r\n     * Init base options. Subscribe to toast changed, toast deleted\r\n     */\r\n    ngOnInit() {\r\n        this.toastChangedSubscription = this.service.toastChanged.subscribe((toast) => {\r\n            if (this.toast.id === toast.id) {\r\n                this.initToast();\r\n            }\r\n        });\r\n        this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\r\n            if (this.toast.id === id) {\r\n                this.onRemove();\r\n            }\r\n        });\r\n        if (!this.toast.config.timeout) {\r\n            this.toast.config.showProgressBar = false;\r\n        }\r\n        this.toast.eventEmitter.next('mounted');\r\n        this.state.animation = 'snotifyToast--in';\r\n    }\r\n    ngAfterContentInit() {\r\n        setTimeout(() => {\r\n            this.stateChanged.emit('beforeShow');\r\n            this.toast.eventEmitter.next('beforeShow');\r\n            this.state.animation = this.toast.config.animation.enter;\r\n        }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\r\n    }\r\n    /**\r\n     * Unsubscribe subscriptions\r\n     */\r\n    ngOnDestroy() {\r\n        cancelAnimationFrame(this.animationFrame);\r\n        this.toast.eventEmitter.next('destroyed');\r\n        this.toastChangedSubscription.unsubscribe();\r\n        this.toastDeletedSubscription.unsubscribe();\r\n    }\r\n    /*\r\n    Event hooks\r\n     */\r\n    /**\r\n     * Trigger OnClick lifecycle\r\n     */\r\n    onClick() {\r\n        this.toast.eventEmitter.next('click');\r\n        if (this.toast.config.closeOnClick) {\r\n            this.service.remove(this.toast.id);\r\n        }\r\n    }\r\n    /**\r\n     * Trigger beforeDestroy lifecycle. Removes toast\r\n     */\r\n    onRemove() {\r\n        this.state.isDestroying = true;\r\n        this.toast.eventEmitter.next('beforeHide');\r\n        this.stateChanged.emit('beforeHide');\r\n        this.state.animation = this.toast.config.animation.exit;\r\n        setTimeout(() => {\r\n            this.stateChanged.emit('hidden');\r\n            this.state.animation = 'snotifyToast--out';\r\n            this.toast.eventEmitter.next('hidden');\r\n            setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\r\n        }, this.toast.config.animation.time / 2);\r\n    }\r\n    /**\r\n     * Trigger onHoverEnter lifecycle\r\n     */\r\n    onMouseEnter() {\r\n        this.toast.eventEmitter.next('mouseenter');\r\n        if (this.toast.config.pauseOnHover) {\r\n            this.state.paused = true;\r\n        }\r\n    }\r\n    /**\r\n     * Trigger onHoverLeave lifecycle\r\n     */\r\n    onMouseLeave() {\r\n        if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\r\n            this.state.paused = false;\r\n            this.startTimeout(this.toast.config.timeout * this.state.progress);\r\n        }\r\n        this.toast.eventEmitter.next('mouseleave');\r\n    }\r\n    /**\r\n     * Remove toast completely after animation\r\n     */\r\n    onExitTransitionEnd() {\r\n        if (this.state.isDestroying) {\r\n            return;\r\n        }\r\n        this.initToast();\r\n        this.toast.eventEmitter.next('shown');\r\n    }\r\n    /*\r\n     Common\r\n     */\r\n    /**\r\n     * Initialize base toast config\r\n     *\r\n     */\r\n    initToast() {\r\n        if (this.toast.config.timeout > 0) {\r\n            this.startTimeout(0);\r\n        }\r\n    }\r\n    /**\r\n     * Start progress bar\r\n     * @param startTime number\r\n     */\r\n    startTimeout(startTime = 0) {\r\n        const start = performance.now();\r\n        const calculate = () => {\r\n            this.animationFrame = requestAnimationFrame(timestamp => {\r\n                const runtime = timestamp + startTime - start;\r\n                const progress = Math.min(runtime / this.toast.config.timeout, 1);\r\n                if (this.state.paused) {\r\n                    cancelAnimationFrame(this.animationFrame);\r\n                }\r\n                else if (runtime < this.toast.config.timeout) {\r\n                    this.state.progress = progress;\r\n                    calculate();\r\n                }\r\n                else {\r\n                    this.state.progress = 1;\r\n                    cancelAnimationFrame(this.animationFrame);\r\n                    this.service.remove(this.toast.id);\r\n                }\r\n            });\r\n        };\r\n        calculate();\r\n    }\r\n};\r\nToastComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\r\n__decorate([\r\n    Input()\r\n], ToastComponent.prototype, \"toast\", void 0);\r\n__decorate([\r\n    Output()\r\n], ToastComponent.prototype, \"stateChanged\", void 0);\r\nToastComponent = __decorate([\r\n    Component({\r\n        selector: 'ng-snotify-toast',\r\n        template: \"<div\\r\\n  [attr.role]=\\\"toast.config.type === state.promptType ? 'dialog' : 'alert'\\\"\\r\\n  [attr.aria-labelledby]=\\\"'snotify_' + toast.id\\\"\\r\\n  [attr.aria-modal]=\\\"toast.config.type === state.promptType\\\"\\r\\n  [ngClass]=\\\"[\\r\\n    'snotifyToast animated',\\r\\n    'snotify-' + toast.config.type,\\r\\n    state.animation,\\r\\n    toast.valid === undefined ? '' : toast.valid ? 'snotifyToast--valid' : 'snotifyToast--invalid'\\r\\n  ]\\\"\\r\\n  [ngStyle]=\\\"{\\r\\n    '-webkit-transition': toast.config.animation.time + 'ms',\\r\\n    transition: toast.config.animation.time + 'ms',\\r\\n    '-webkit-animation-duration': toast.config.animation.time + 'ms',\\r\\n    'animation-duration': toast.config.animation.time + 'ms'\\r\\n  }\\\"\\r\\n  (animationend)=\\\"onExitTransitionEnd()\\\"\\r\\n  (click)=\\\"onClick()\\\"\\r\\n  (mouseenter)=\\\"onMouseEnter()\\\"\\r\\n  (mouseleave)=\\\"onMouseLeave()\\\"\\r\\n>\\r\\n  <div class=\\\"snotifyToast__progressBar\\\" *ngIf=\\\"toast.config.showProgressBar\\\">\\r\\n    <span class=\\\"snotifyToast__progressBar__percentage\\\" [ngStyle]=\\\"{ width: state.progress * 100 + '%' }\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"snotifyToast__inner\\\" *ngIf=\\\"!toast.config.html; else toastHTML\\\">\\r\\n    <div class=\\\"snotifyToast__title\\\" [attr.id]=\\\"'snotify_' + toast.id\\\" *ngIf=\\\"toast.title\\\">\\r\\n      {{ toast.title | truncate: toast.config.titleMaxLength }}\\r\\n    </div>\\r\\n    <div class=\\\"snotifyToast__body\\\" *ngIf=\\\"toast.body\\\">{{ toast.body | truncate: toast.config.bodyMaxLength }}</div>\\r\\n    <ng-snotify-prompt *ngIf=\\\"toast.config.type === state.promptType\\\" [toast]=\\\"toast\\\"> </ng-snotify-prompt>\\r\\n    <div\\r\\n      *ngIf=\\\"!toast.config.icon; else elseBlock\\\"\\r\\n      [ngClass]=\\\"['snotify-icon', toast.config.iconClass || 'snotify-icon--' + toast.config.type]\\\"\\r\\n    ></div>\\r\\n    <ng-template #elseBlock>\\r\\n      <img class=\\\"snotify-icon\\\" [src]=\\\"toast.config.icon\\\" />\\r\\n    </ng-template>\\r\\n  </div>\\r\\n  <ng-template #toastHTML>\\r\\n    <div class=\\\"snotifyToast__inner\\\" [innerHTML]=\\\"toast.config.html\\\"></div>\\r\\n  </ng-template>\\r\\n  <ng-snotify-button *ngIf=\\\"toast.config.buttons\\\" [toast]=\\\"toast\\\"></ng-snotify-button>\\r\\n</div>\\r\\n\",\r\n        encapsulation: ViewEncapsulation.None\r\n    })\r\n], ToastComponent);\n\nlet KeysPipe = \r\n/**\r\n * Extract object keys pipe\r\n */\r\nclass KeysPipe {\r\n    transform(value, args = null) {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return Object.keys(value);\r\n    }\r\n};\r\nKeysPipe = __decorate([\r\n    Pipe({\r\n        name: 'keys',\r\n        pure: false\r\n    })\r\n    /**\r\n     * Extract object keys pipe\r\n     */\r\n], KeysPipe);\n\nlet TruncatePipe = \r\n/**\r\n * Truncate toast text pipe\r\n */\r\nclass TruncatePipe {\r\n    transform(value, ...args) {\r\n        let limit = 40;\r\n        let trail = '...';\r\n        if (args.length > 0) {\r\n            limit = args.length > 0 ? parseInt(args[0], 10) : limit;\r\n            trail = args.length > 1 ? args[1] : trail;\r\n        }\r\n        return value.length > limit ? value.substring(0, limit) + trail : value;\r\n    }\r\n};\r\nTruncatePipe = __decorate([\r\n    Pipe({\r\n        name: 'truncate'\r\n    })\r\n    /**\r\n     * Truncate toast text pipe\r\n     */\r\n], TruncatePipe);\n\nvar SnotifyModule_1;\r\nlet SnotifyModule = SnotifyModule_1 = class SnotifyModule {\r\n    static forRoot() {\r\n        return {\r\n            ngModule: SnotifyModule_1,\r\n            providers: [SnotifyService]\r\n        };\r\n    }\r\n};\r\nSnotifyModule = SnotifyModule_1 = __decorate([\r\n    NgModule({\r\n        imports: [CommonModule],\r\n        declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\r\n        exports: [SnotifyComponent, TruncatePipe, KeysPipe]\r\n    })\r\n], SnotifyModule);\n\n/**\r\n * Snotify default configuration object\r\n */\r\nconst ToastDefaults = {\r\n    global: {\r\n        newOnTop: true,\r\n        maxOnScreen: 8,\r\n        maxAtPosition: 8,\r\n        filterDuplicates: false\r\n    },\r\n    toast: {\r\n        type: SnotifyStyle.simple,\r\n        showProgressBar: true,\r\n        timeout: 2000,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        bodyMaxLength: 150,\r\n        titleMaxLength: 16,\r\n        backdrop: -1,\r\n        icon: null,\r\n        iconClass: null,\r\n        html: null,\r\n        position: SnotifyPosition.rightBottom,\r\n        animation: { enter: 'fadeIn', exit: 'fadeOut', time: 400 }\r\n    },\r\n    type: {\r\n        [SnotifyStyle.prompt]: {\r\n            timeout: 0,\r\n            closeOnClick: false,\r\n            buttons: [\r\n                { text: 'Ok', action: null, bold: true },\r\n                { text: 'Cancel', action: null, bold: false }\r\n            ],\r\n            placeholder: 'Enter answer here...',\r\n            type: SnotifyStyle.prompt\r\n        },\r\n        [SnotifyStyle.confirm]: {\r\n            timeout: 0,\r\n            closeOnClick: false,\r\n            buttons: [\r\n                { text: 'Ok', action: null, bold: true },\r\n                { text: 'Cancel', action: null, bold: false }\r\n            ],\r\n            type: SnotifyStyle.confirm\r\n        },\r\n        [SnotifyStyle.simple]: {\r\n            type: SnotifyStyle.simple\r\n        },\r\n        [SnotifyStyle.success]: {\r\n            type: SnotifyStyle.success\r\n        },\r\n        [SnotifyStyle.error]: {\r\n            type: SnotifyStyle.error\r\n        },\r\n        [SnotifyStyle.warning]: {\r\n            type: SnotifyStyle.warning\r\n        },\r\n        [SnotifyStyle.info]: {\r\n            type: SnotifyStyle.info\r\n        },\r\n        [SnotifyStyle.async]: {\r\n            pauseOnHover: false,\r\n            closeOnClick: false,\r\n            timeout: 0,\r\n            showProgressBar: false,\r\n            type: SnotifyStyle.async\r\n        }\r\n    }\r\n};\n\n/*\r\n * Public API Surface of ng-snotify\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonsComponent, KeysPipe, PromptComponent, SnotifyComponent, SnotifyModule, SnotifyPosition, SnotifyService, SnotifyStyle, SnotifyToast, ToastComponent, ToastDefaults, TruncatePipe, SnotifyComponent as ɵa, SnotifyService as ɵb, TransformArgument as ɵd, SetToastType as ɵe, ToastComponent as ɵf, TruncatePipe as ɵg, ButtonsComponent as ɵh, PromptComponent as ɵi, KeysPipe as ɵj };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}