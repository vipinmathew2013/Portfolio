import { __assign, __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Subject, from } from 'rxjs';
import { TransformArgument } from '../decorators/transform-argument.decorator';
import { mergeDeep, uuid } from '../utils';
import { SetToastType } from '../decorators/set-toast-type.decorator';
import { SnotifyToast } from '../models/snotify-toast.model';
import { SnotifyStyle } from '../enums/snotify-style.enum';
/**
 * SnotifyService - create, remove, config toasts
 */
var SnotifyService = /** @class */ (function () {
    function SnotifyService(config) {
        this.config = config;
        this.emitter = new Subject();
        this.toastChanged = new Subject();
        this.toastDeleted = new Subject();
        this.notifications = [];
    }
    /**
     * emit changes in notifications array
     */
    SnotifyService.prototype.emit = function () {
        this.emitter.next(this.notifications.slice());
    };
    /**
     * returns SnotifyToast object
     * @param id Number
     * @return SnotifyToast|undefined
     */
    SnotifyService.prototype.get = function (id) {
        return this.notifications.find(function (toast) { return toast.id === id; });
    };
    /**
     * add SnotifyToast to notifications array
     * @param toast SnotifyToast
     */
    SnotifyService.prototype.add = function (toast) {
        if (this.config.global.filterDuplicates && this.containsToast(toast)) {
            return;
        }
        if (this.config.global.newOnTop) {
            this.notifications.unshift(toast);
        }
        else {
            this.notifications.push(toast);
        }
        this.emit();
    };
    /**
     * checks if the toast is in the collection.
     * @param inToast SnotifyToast
     * @returns boolean
     */
    SnotifyService.prototype.containsToast = function (inToast) {
        return this.notifications.some(function (toast) { return toast.equals(inToast); });
    };
    /**
     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array
     * @param id number
     * @param remove boolean
     */
    SnotifyService.prototype.remove = function (id, remove) {
        if (!id) {
            return this.clear();
        }
        else if (remove) {
            this.notifications = this.notifications.filter(function (toast) { return toast.id !== id; });
            return this.emit();
        }
        this.toastDeleted.next(id);
    };
    /**
     * Clear notifications array
     */
    SnotifyService.prototype.clear = function () {
        this.notifications = [];
        this.emit();
    };
    /**
     * Creates toast and add it to array, returns toast id
     * @param snotify Snotify
     * @return number
     */
    SnotifyService.prototype.create = function (snotify) {
        var config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);
        var toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);
        this.add(toast);
        return toast;
    };
    SnotifyService.prototype.setDefaults = function (defaults) {
        return (this.config = mergeDeep(this.config, defaults));
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.simple = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.success = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.error = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.info = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.warning = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.confirm = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.prompt = function (args) {
        return this.create(args);
    };
    /**
     * Transform toast arguments into Snotify object
     */
    SnotifyService.prototype.async = function (args) {
        var _this = this;
        var async;
        if (args.action instanceof Promise) {
            async = from(args.action);
        }
        else {
            async = args.action;
        }
        var toast = this.create(args);
        toast.on('mounted', function () {
            var subscription = async.subscribe(function (next) {
                _this.mergeToast(toast, next);
            }, function (error) {
                _this.mergeToast(toast, error, SnotifyStyle.error);
                subscription.unsubscribe();
            }, function () {
                _this.mergeToast(toast, {}, SnotifyStyle.success);
                subscription.unsubscribe();
            });
        });
        return toast;
    };
    SnotifyService.prototype.mergeToast = function (toast, next, type) {
        if (next.body) {
            toast.body = next.body;
        }
        if (next.title) {
            toast.title = next.title;
        }
        if (type) {
            toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], { type: type }, next.config);
        }
        else {
            toast.config = mergeDeep(toast.config, next.config);
        }
        if (next.html) {
            toast.config.html = next.html;
        }
        this.emit();
        this.toastChanged.next(toast);
    };
    /**
     * Creates empty toast with html string inside
     * @param html string | SafeHtml
     * @param config SnotifyToastConfig
     * @returns number
     */
    SnotifyService.prototype.html = function (html, config) {
        return this.create({
            title: null,
            body: null,
            config: __assign(__assign({}, config), { html: html })
        });
    };
    SnotifyService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['SnotifyToastConfig',] }] }
    ]; };
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "simple", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "success", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "error", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "info", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "warning", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "confirm", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "prompt", null);
    __decorate([
        TransformArgument
        /**
         * Determines current toast type and collects default configuration
         */
        ,
        SetToastType
    ], SnotifyService.prototype, "async", null);
    SnotifyService = __decorate([
        Injectable()
        // tslint:disable:unified-signatures
        ,
        __param(0, Inject('SnotifyToastConfig'))
    ], SnotifyService);
    return SnotifyService;
}());
export { SnotifyService };
//# sourceMappingURL=data:application/json;base64,