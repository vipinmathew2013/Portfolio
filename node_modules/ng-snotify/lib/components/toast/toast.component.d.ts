import { AfterContentInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { SnotifyService } from '../../services/snotify.service';
import { SnotifyToast } from '../../models/snotify-toast.model';
import { Subscription } from 'rxjs';
import { SnotifyEvent } from '../../types/event.type';
import { SnotifyStyle } from '../../enums/snotify-style.enum';
import * as ɵngcc0 from '@angular/core';
export declare class ToastComponent implements OnInit, OnDestroy, AfterContentInit {
    private service;
    /**
     * Get toast from notifications array
     */
    toast: SnotifyToast;
    stateChanged: EventEmitter<SnotifyEvent>;
    toastDeletedSubscription: Subscription;
    toastChangedSubscription: Subscription;
    /**
     * requestAnimationFrame id
     */
    animationFrame: number;
    /**
     * Toast state
     */
    state: {
        paused: boolean;
        progress: number;
        animation: string;
        isDestroying: boolean;
        promptType: SnotifyStyle;
    };
    constructor(service: SnotifyService);
    /**
     * Init base options. Subscribe to toast changed, toast deleted
     */
    ngOnInit(): void;
    ngAfterContentInit(): void;
    /**
     * Unsubscribe subscriptions
     */
    ngOnDestroy(): void;
    /**
     * Trigger OnClick lifecycle
     */
    onClick(): void;
    /**
     * Trigger beforeDestroy lifecycle. Removes toast
     */
    onRemove(): void;
    /**
     * Trigger onHoverEnter lifecycle
     */
    onMouseEnter(): void;
    /**
     * Trigger onHoverLeave lifecycle
     */
    onMouseLeave(): void;
    /**
     * Remove toast completely after animation
     */
    onExitTransitionEnd(): void;
    /**
     * Initialize base toast config
     *
     */
    initToast(): void;
    /**
     * Start progress bar
     * @param startTime number
     */
    startTimeout(startTime?: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastComponent, "ng-snotify-toast", never, { "toast": "toast"; }, { "stateChanged": "stateChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRvYXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTbm90aWZ5U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Nub3RpZnkuc2VydmljZSc7XHJcbmltcG9ydCB7IFNub3RpZnlUb2FzdCB9IGZyb20gJy4uLy4uL21vZGVscy9zbm90aWZ5LXRvYXN0Lm1vZGVsJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNub3RpZnlFdmVudCB9IGZyb20gJy4uLy4uL3R5cGVzL2V2ZW50LnR5cGUnO1xyXG5pbXBvcnQgeyBTbm90aWZ5U3R5bGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zbm90aWZ5LXN0eWxlLmVudW0nO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb2FzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcclxuICAgIHByaXZhdGUgc2VydmljZTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRvYXN0IGZyb20gbm90aWZpY2F0aW9ucyBhcnJheVxyXG4gICAgICovXHJcbiAgICB0b2FzdDogU25vdGlmeVRvYXN0O1xyXG4gICAgc3RhdGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8U25vdGlmeUV2ZW50PjtcclxuICAgIHRvYXN0RGVsZXRlZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgdG9hc3RDaGFuZ2VkU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICAvKipcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZSBpZFxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb25GcmFtZTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2FzdCBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIHBhdXNlZDogYm9vbGVhbjtcclxuICAgICAgICBwcm9ncmVzczogbnVtYmVyO1xyXG4gICAgICAgIGFuaW1hdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIGlzRGVzdHJveWluZzogYm9vbGVhbjtcclxuICAgICAgICBwcm9tcHRUeXBlOiBTbm90aWZ5U3R5bGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZTogU25vdGlmeVNlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0IGJhc2Ugb3B0aW9ucy4gU3Vic2NyaWJlIHRvIHRvYXN0IGNoYW5nZWQsIHRvYXN0IGRlbGV0ZWRcclxuICAgICAqL1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVbnN1YnNjcmliZSBzdWJzY3JpcHRpb25zXHJcbiAgICAgKi9cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgT25DbGljayBsaWZlY3ljbGVcclxuICAgICAqL1xyXG4gICAgb25DbGljaygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VyIGJlZm9yZURlc3Ryb3kgbGlmZWN5Y2xlLiBSZW1vdmVzIHRvYXN0XHJcbiAgICAgKi9cclxuICAgIG9uUmVtb3ZlKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgb25Ib3ZlckVudGVyIGxpZmVjeWNsZVxyXG4gICAgICovXHJcbiAgICBvbk1vdXNlRW50ZXIoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlciBvbkhvdmVyTGVhdmUgbGlmZWN5Y2xlXHJcbiAgICAgKi9cclxuICAgIG9uTW91c2VMZWF2ZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdG9hc3QgY29tcGxldGVseSBhZnRlciBhbmltYXRpb25cclxuICAgICAqL1xyXG4gICAgb25FeGl0VHJhbnNpdGlvbkVuZCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGJhc2UgdG9hc3QgY29uZmlnXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBpbml0VG9hc3QoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnQgcHJvZ3Jlc3MgYmFyXHJcbiAgICAgKiBAcGFyYW0gc3RhcnRUaW1lIG51bWJlclxyXG4gICAgICovXHJcbiAgICBzdGFydFRpbWVvdXQoc3RhcnRUaW1lPzogbnVtYmVyKTogdm9pZDtcclxufVxyXG4iXX0=