import { OnDestroy, OnInit } from '@angular/core';
import { SnotifyService } from '../../services/snotify.service';
import { SnotifyToast } from '../../models/snotify-toast.model';
import { Subscription } from 'rxjs';
import { SnotifyNotifications } from '../../interfaces/snotify-notifications.interface';
import { SnotifyEvent } from '../../types/event.type';
import * as ɵngcc0 from '@angular/core';
export declare class SnotifyComponent implements OnInit, OnDestroy {
    private service;
    /**
     * Toasts array
     */
    notifications: SnotifyNotifications;
    /**
     * Toasts emitter
     */
    emitter: Subscription;
    /**
     * Helper for slice pipe (maxOnScreen)
     */
    dockSizeA: number;
    /**
     * Helper for slice pipe (maxOnScreen)
     */
    dockSizeB: number | undefined;
    /**
     * Helper for slice pipe (maxAtPosition)
     */
    blockSizeA: number;
    /**
     * Helper for slice pipe (maxAtPosition)
     */
    blockSizeB: number | undefined;
    /**
     * Backdrop Opacity
     */
    backdrop: number;
    /**
     * How many toasts with backdrop in current queue
     */
    withBackdrop: SnotifyToast[];
    constructor(service: SnotifyService);
    /**
     * Init base options. Subscribe to options, lifecycle change
     */
    ngOnInit(): void;
    /**
     * Changes the backdrop opacity
     * @param event SnotifyEvent
     */
    stateChanged(event: SnotifyEvent): void;
    /**
     * Split toasts toasts into different objects
     * @param toasts SnotifyToast[]
     * @returns SnotifyNotifications
     */
    splitToasts(toasts: SnotifyToast[]): SnotifyNotifications;
    /**
     * Unsubscribe subscriptions
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SnotifyComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SnotifyComponent, "ng-snotify", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25vdGlmeS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic25vdGlmeS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNub3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc25vdGlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU25vdGlmeVRvYXN0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Nub3RpZnktdG9hc3QubW9kZWwnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgU25vdGlmeU5vdGlmaWNhdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3Nub3RpZnktbm90aWZpY2F0aW9ucy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBTbm90aWZ5RXZlbnQgfSBmcm9tICcuLi8uLi90eXBlcy9ldmVudC50eXBlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU25vdGlmeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgc2VydmljZTtcclxuICAgIC8qKlxyXG4gICAgICogVG9hc3RzIGFycmF5XHJcbiAgICAgKi9cclxuICAgIG5vdGlmaWNhdGlvbnM6IFNub3RpZnlOb3RpZmljYXRpb25zO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2FzdHMgZW1pdHRlclxyXG4gICAgICovXHJcbiAgICBlbWl0dGVyOiBTdWJzY3JpcHRpb247XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmb3Igc2xpY2UgcGlwZSAobWF4T25TY3JlZW4pXHJcbiAgICAgKi9cclxuICAgIGRvY2tTaXplQTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZm9yIHNsaWNlIHBpcGUgKG1heE9uU2NyZWVuKVxyXG4gICAgICovXHJcbiAgICBkb2NrU2l6ZUI6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZvciBzbGljZSBwaXBlIChtYXhBdFBvc2l0aW9uKVxyXG4gICAgICovXHJcbiAgICBibG9ja1NpemVBOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmb3Igc2xpY2UgcGlwZSAobWF4QXRQb3NpdGlvbilcclxuICAgICAqL1xyXG4gICAgYmxvY2tTaXplQjogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYWNrZHJvcCBPcGFjaXR5XHJcbiAgICAgKi9cclxuICAgIGJhY2tkcm9wOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEhvdyBtYW55IHRvYXN0cyB3aXRoIGJhY2tkcm9wIGluIGN1cnJlbnQgcXVldWVcclxuICAgICAqL1xyXG4gICAgd2l0aEJhY2tkcm9wOiBTbm90aWZ5VG9hc3RbXTtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IFNub3RpZnlTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdCBiYXNlIG9wdGlvbnMuIFN1YnNjcmliZSB0byBvcHRpb25zLCBsaWZlY3ljbGUgY2hhbmdlXHJcbiAgICAgKi9cclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgdGhlIGJhY2tkcm9wIG9wYWNpdHlcclxuICAgICAqIEBwYXJhbSBldmVudCBTbm90aWZ5RXZlbnRcclxuICAgICAqL1xyXG4gICAgc3RhdGVDaGFuZ2VkKGV2ZW50OiBTbm90aWZ5RXZlbnQpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcGxpdCB0b2FzdHMgdG9hc3RzIGludG8gZGlmZmVyZW50IG9iamVjdHNcclxuICAgICAqIEBwYXJhbSB0b2FzdHMgU25vdGlmeVRvYXN0W11cclxuICAgICAqIEByZXR1cm5zIFNub3RpZnlOb3RpZmljYXRpb25zXHJcbiAgICAgKi9cclxuICAgIHNwbGl0VG9hc3RzKHRvYXN0czogU25vdGlmeVRvYXN0W10pOiBTbm90aWZ5Tm90aWZpY2F0aW9ucztcclxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmUgc3Vic2NyaXB0aW9uc1xyXG4gICAgICovXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==