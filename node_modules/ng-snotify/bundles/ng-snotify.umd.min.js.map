{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng-snotify/lib/enums/snotify-style.enum.ts","ng://ng-snotify/lib/decorators/transform-argument.decorator.ts","ng://ng-snotify/lib/utils.ts","ng://ng-snotify/lib/decorators/set-toast-type.decorator.ts","ng://ng-snotify/lib/models/snotify-toast.model.ts","ng://ng-snotify/lib/enums/snotify-position.enum.ts","ng://ng-snotify/lib/services/snotify.service.ts","ng://ng-snotify/lib/components/buttons/buttons.component.ts","ng://ng-snotify/lib/components/prompt/prompt.component.ts","ng://ng-snotify/lib/components/snotify/snotify.component.ts","ng://ng-snotify/lib/components/toast/toast.component.ts","ng://ng-snotify/lib/pipes/keys.pipe.ts","ng://ng-snotify/lib/pipes/truncate.pipe.ts","ng://ng-snotify/lib/snotify.module.ts","ng://ng-snotify/lib/toast-defaults.ts"],"names":["SnotifyStyle","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","TransformArgument","propertyKey","descriptor","async","value","result","args","_i","title","body","config","action","_a","isObject","item","Array","isArray","mergeDeep","sources","source","shift","SetToastType","type","SnotifyPosition","SnotifyToast","id","_this","eventEmitter","Subject","eventsHolder","prompt","on","forEach","subscription","unsubscribe","event","push","subscribe","e","equals","toast","SnotifyService","emitter","toastChanged","toastDeleted","notifications","paramIndex","decorator","emit","next","slice","get","find","add","global","filterDuplicates","containsToast","newOnTop","unshift","inToast","some","remove","filter","clear","create","snotify","Math","floor","random","Date","now","setDefaults","defaults","simple","success","error","info","warning","confirm","Promise","from","mergeToast","html","Inject","Injectable","ButtonsComponent","service","Input","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","PromptComponent","isPromptFocused","SnotifyComponent","backdrop","ngOnInit","toasts","dockSizeA","maxOnScreen","dockSizeB","undefined","blockSizeA","maxAtPosition","blockSizeB","withBackdrop","reverse","splitToasts","stateChanged","property","position","ngOnDestroy","ToastComponent","EventEmitter","state","paused","progress","animation","isDestroying","promptType","toastChangedSubscription","initToast","toastDeletedSubscription","onRemove","timeout","showProgressBar","ngAfterContentInit","setTimeout","enter","time","cancelAnimationFrame","animationFrame","onClick","closeOnClick","exit","onMouseEnter","pauseOnHover","onMouseLeave","startTimeout","onExitTransitionEnd","startTime","start","performance","calculate","requestAnimationFrame","timestamp","runtime","min","Output","KeysPipe","transform","keys","Pipe","name","pure","TruncatePipe","limit","trail","parseInt","substring","SnotifyModule","forRoot","ngModule","SnotifyModule_1","providers","NgModule","imports","CommonModule","declarations","exports","ToastDefaults","bodyMaxLength","titleMaxLength","icon","iconClass","rightBottom","buttons","text","bold","placeholder"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * Toast style.\r\n */\r\nexport enum SnotifyStyle {\r\n  simple = 'simple',\r\n  success = 'success',\r\n  error = 'error',\r\n  warning = 'warning',\r\n  info = 'info',\r\n  async = 'async',\r\n  confirm = 'confirm',\r\n  prompt = 'prompt'\r\n}\r\n","import { Snotify } from '../interfaces/snotify.interface';\r\nimport { SnotifyType } from '../types/snotify.type';\r\nimport { SnotifyStyle } from '../enums/snotify-style.enum';\r\n\r\n/**\r\n * Transform arguments to Snotify object\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns Snotify\r\n */\r\nexport function TransformArgument(target: any, propertyKey: SnotifyType, descriptor: PropertyDescriptor) {\r\n  if (propertyKey === SnotifyStyle.async) {\r\n    return {\r\n      value(...args: any[]) {\r\n        let result;\r\n        if (args.length === 2) {\r\n          result = {\r\n            title: null,\r\n            body: args[0],\r\n            config: null,\r\n            action: args[1]\r\n          };\r\n        } else if (args.length === 3) {\r\n          if (typeof args[1] === 'string') {\r\n            result = {\r\n              title: args[1],\r\n              body: args[0],\r\n              config: null,\r\n              action: args[2]\r\n            };\r\n          } else {\r\n            result = {\r\n              title: null,\r\n              body: args[0],\r\n              config: args[2],\r\n              action: args[1]\r\n            };\r\n          }\r\n        } else {\r\n          result = {\r\n            title: args[1],\r\n            body: args[0],\r\n            config: args[3],\r\n            action: args[2]\r\n          };\r\n        }\r\n        return descriptor.value.apply(this, [result as Snotify]);\r\n      }\r\n    };\r\n  } else {\r\n    return {\r\n      value(...args: any[]) {\r\n        let result;\r\n        if (args.length === 1) {\r\n          result = {\r\n            title: null,\r\n            body: args[0],\r\n            config: null\r\n          };\r\n        } else if (args.length === 3) {\r\n          result = {\r\n            title: args[1],\r\n            body: args[0],\r\n            config: args[2]\r\n          };\r\n        } else {\r\n          result = {\r\n            title: null,\r\n            config: null,\r\n            body: args[0],\r\n            [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\r\n          };\r\n        }\r\n        return descriptor.value.apply(this, [result as Snotify]);\r\n      }\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Generates random id\r\n * @return number\r\n */\r\nexport function uuid(): number {\r\n  return Math.floor(Math.random() * (Date.now() - 1)) + 1;\r\n}\r\n\r\n/**\r\n * Simple is object check.\r\n * @param item Object<any>\r\n * @returns boolean\r\n */\r\nexport function isObject(item): boolean {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\n/**\r\n * Deep merge objects.\r\n * @param sources Array<Object<any>>\r\n * @returns Object<any>\r\n */\r\nexport function mergeDeep(...sources) {\r\n  const target = {};\r\n  if (!sources.length) {\r\n    return target;\r\n  }\r\n\r\n  while (sources.length > 0) {\r\n    const source = sources.shift();\r\n    if (isObject(source)) {\r\n      for (const key in source) {\r\n        if (isObject(source[key])) {\r\n          target[key] = mergeDeep(target[key], source[key]);\r\n        } else {\r\n          Object.assign(target, { [key]: source[key] });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function animate(start: number, duration: number, callback: (currentValue: number, progress: number) => {}) {\r\n  let endTime;\r\n  requestAnimationFrame(timestamp => (endTime = timestamp + duration));\r\n  const calculate = () => {\r\n    requestAnimationFrame(timestamp => {\r\n      const runtime = timestamp - endTime;\r\n      const progress = Math.min(runtime / duration, 1) + start;\r\n      if (runtime < duration) {\r\n        if (callback(+(100 * progress).toFixed(2), progress)) {\r\n          calculate();\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { SnotifyType } from '../types/snotify.type';\r\nimport { Snotify } from '../interfaces/snotify.interface';\r\n\r\n/**\r\n * Defines toast style depending on method name\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns value: ((...args: any[]) => any)\r\n */\r\nexport function SetToastType(target: any, propertyKey: SnotifyType, descriptor: PropertyDescriptor) {\r\n  return {\r\n    value(...args: any[]) {\r\n      (args[0] as Snotify).config = {\r\n        ...(args[0] as Snotify).config,\r\n        type: propertyKey\r\n      };\r\n      return descriptor.value.apply(this, args);\r\n    }\r\n  };\r\n}\r\n","import { SnotifyToastConfig } from '../interfaces/snotify-toast-config.interface';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { SnotifyEvent } from '../types/event.type';\r\nimport { SnotifyStyle } from '../enums/snotify-style.enum';\r\n// @TODO remove method in observable way\r\n/**\r\n * Toast main model\r\n */\r\nexport class SnotifyToast {\r\n  /**\r\n   * Emits SnotifyEvent\r\n   */\r\n  readonly eventEmitter = new Subject<SnotifyEvent>();\r\n  /**\r\n   * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\r\n   */\r\n  private eventsHolder: Subscription[] = [];\r\n  /**\r\n   * Toast prompt value\r\n   */\r\n  value: string;\r\n  /**\r\n   * Toast validator\r\n   */\r\n  valid: boolean;\r\n  constructor(public id: number, public title: string, public body: string, public config: SnotifyToastConfig) {\r\n    if (this.config.type === SnotifyStyle.prompt) {\r\n      this.value = '';\r\n    }\r\n    this.on('hidden', () => {\r\n      this.eventsHolder.forEach((subscription: Subscription) => {\r\n        subscription.unsubscribe();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Subscribe to toast events\r\n   * @returns this\r\n   * @param event SnotifyEvent\r\n   * @param action (toast: this) => void\r\n   */\r\n  on(event: SnotifyEvent, action: (toast: this) => void): this {\r\n    this.eventsHolder.push(\r\n      this.eventEmitter.subscribe((e: SnotifyEvent) => {\r\n        if (e === event) {\r\n          action(this);\r\n        }\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Tests if a toast equals this toast.\r\n   * @returns boolean true then equals else false.\r\n   * @param toast SnotifyToast\r\n   */\r\n  equals(toast: SnotifyToast): boolean {\r\n    return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\r\n  }\r\n}\r\n","/**\r\n * Toast position\r\n */\r\nexport enum SnotifyPosition {\r\n  leftTop = 'leftTop',\r\n  leftCenter = 'leftCenter',\r\n  leftBottom = 'leftBottom',\r\n  rightTop = 'rightTop',\r\n  rightCenter = 'rightCenter',\r\n  rightBottom = 'rightBottom',\r\n  centerTop = 'centerTop',\r\n  centerCenter = 'centerCenter',\r\n  centerBottom = 'centerBottom'\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Observable, Subject, Subscription, from } from 'rxjs';\r\nimport { SnotifyToastConfig } from '../interfaces/snotify-toast-config.interface';\r\nimport { Snotify } from '../interfaces/snotify.interface';\r\nimport { SnotifyType } from '../types/snotify.type';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { TransformArgument } from '../decorators/transform-argument.decorator';\r\nimport { mergeDeep, uuid } from '../utils';\r\nimport { SetToastType } from '../decorators/set-toast-type.decorator';\r\nimport { SnotifyDefaults } from '../interfaces/snotify-defaults.interface';\r\nimport { SnotifyToast } from '../models/snotify-toast.model';\r\nimport { SnotifyStyle } from '../enums/snotify-style.enum';\r\n\r\n/**\r\n * SnotifyService - create, remove, config toasts\r\n */\r\n@Injectable()\r\n// tslint:disable:unified-signatures\r\nexport class SnotifyService {\r\n  readonly emitter = new Subject<SnotifyToast[]>();\r\n  readonly toastChanged = new Subject<SnotifyToast>();\r\n  readonly toastDeleted = new Subject<number>();\r\n  private notifications: SnotifyToast[] = [];\r\n\r\n  constructor(@Inject('SnotifyToastConfig') public config: SnotifyDefaults) {}\r\n  /**\r\n   * emit changes in notifications array\r\n   */\r\n  private emit(): void {\r\n    this.emitter.next(this.notifications.slice());\r\n  }\r\n\r\n  /**\r\n   * returns SnotifyToast object\r\n   * @param id Number\r\n   * @return SnotifyToast|undefined\r\n   */\r\n  get(id: number): SnotifyToast {\r\n    return this.notifications.find(toast => toast.id === id);\r\n  }\r\n\r\n  /**\r\n   * add SnotifyToast to notifications array\r\n   * @param toast SnotifyToast\r\n   */\r\n  private add(toast: SnotifyToast): void {\r\n    if (this.config.global.filterDuplicates && this.containsToast(toast)) {\r\n      return;\r\n    }\r\n    if (this.config.global.newOnTop) {\r\n      this.notifications.unshift(toast);\r\n    } else {\r\n      this.notifications.push(toast);\r\n    }\r\n    this.emit();\r\n  }\r\n\r\n  /**\r\n   * checks if the toast is in the collection.\r\n   * @param inToast SnotifyToast\r\n   * @returns boolean\r\n   */\r\n  private containsToast(inToast: SnotifyToast): boolean {\r\n    return this.notifications.some(toast => toast.equals(inToast));\r\n  }\r\n\r\n  /**\r\n   * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\r\n   * @param id number\r\n   * @param remove boolean\r\n   */\r\n  remove(id?: number, remove?: boolean): void {\r\n    if (!id) {\r\n      return this.clear();\r\n    } else if (remove) {\r\n      this.notifications = this.notifications.filter(toast => toast.id !== id);\r\n      return this.emit();\r\n    }\r\n    this.toastDeleted.next(id);\r\n  }\r\n\r\n  /**\r\n   * Clear notifications array\r\n   */\r\n  clear(): void {\r\n    this.notifications = [];\r\n    this.emit();\r\n  }\r\n\r\n  /**\r\n   * Creates toast and add it to array, returns toast id\r\n   * @param snotify Snotify\r\n   * @return number\r\n   */\r\n  create(snotify: Snotify): SnotifyToast {\r\n    const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\r\n    const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\r\n    this.add(toast);\r\n    return toast;\r\n  }\r\n\r\n  setDefaults(defaults: SnotifyDefaults): SnotifyDefaults {\r\n    return (this.config = mergeDeep(this.config, defaults) as SnotifyDefaults);\r\n  }\r\n\r\n  /**\r\n   * Create toast with simple style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  simple(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with simple style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  simple(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with simple style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  simple(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with simple style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  simple(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  simple(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with success style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  success(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with success style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  success(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with success style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  success(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with success style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  success(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  success(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with error style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  error(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with error style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  error(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with error style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  error(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with error style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  error(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  error(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with info style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  info(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with info style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  info(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with info style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  info(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with info style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  info(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  info(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with warning style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  warning(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with warning style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  warning(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with warning style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  warning(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with warning style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  warning(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  warning(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with confirm style returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  confirm(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with confirm style returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  confirm(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with confirm style returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  confirm(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with confirm style  returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  confirm(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  confirm(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Create toast with Prompt style with two buttons, returns toast id;\r\n   * @param body string\r\n   * @returns number\r\n   */\r\n  prompt(body: string): SnotifyToast;\r\n  /**\r\n   * Create toast with Prompt style with two buttons, returns toast id;\r\n   * @param body string\r\n   * @param title string\r\n   * @returns number\r\n   */\r\n  prompt(body: string, title: string): SnotifyToast;\r\n  /**\r\n   * Create toast with Prompt style with two buttons, returns toast id;\r\n   * @param body string\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  prompt(body: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Create toast with Prompt style with two buttons, returns toast id;\r\n   * @param [body] string\r\n   * @param [title] string\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  prompt(body: string, title: string, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  prompt(args: any): SnotifyToast {\r\n    return this.create(args);\r\n  }\r\n\r\n  /**\r\n   * Creates async toast with Info style. Pass action, and resolve or reject it.\r\n   * @param body string\r\n   * @param action Promise<Snotify> | Observable<Snotify>\r\n   * @returns number\r\n   */\r\n  async(body: string, action: Promise<Snotify> | Observable<Snotify>): SnotifyToast;\r\n  /**\r\n   * Creates async toast with Info style. Pass action, and resolve or reject it.\r\n   * @param body string\r\n   * @param title string\r\n   * @param action Promise<Snotify> | Observable<Snotify>\r\n   * @returns number\r\n   */\r\n  async(body: string, title: string, action: Promise<Snotify> | Observable<Snotify>): SnotifyToast;\r\n  /**\r\n   * Creates async toast with Info style. Pass action, and resolve or reject it.\r\n   * @param body string\r\n   * @param action Promise<Snotify> | Observable<Snotify>\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  async(body: string, action: Promise<Snotify> | Observable<Snotify>, config: SnotifyToastConfig): SnotifyToast;\r\n  /**\r\n   * Creates async toast with Info style. Pass action, and resolve or reject it.\r\n   * @param body string\r\n   * @param title string\r\n   * @param action Promise<Snotify> | Observable<Snotify>\r\n   * @param [config] SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  async(\r\n    body: string,\r\n    title: string,\r\n    action: Promise<Snotify> | Observable<Snotify>,\r\n    config: SnotifyToastConfig\r\n  ): SnotifyToast;\r\n  /**\r\n   * Transform toast arguments into Snotify object\r\n   */\r\n  @TransformArgument\r\n  /**\r\n   * Determines current toast type and collects default configuration\r\n   */\r\n  @SetToastType\r\n  async(args: any): SnotifyToast {\r\n    let async: Observable<any>;\r\n    if (args.action instanceof Promise) {\r\n      async = from(args.action);\r\n    } else {\r\n      async = args.action;\r\n    }\r\n\r\n    const toast = this.create(args);\r\n\r\n    toast.on('mounted', () => {\r\n      const subscription: Subscription = async.subscribe(\r\n        (next?: Snotify) => {\r\n          this.mergeToast(toast, next);\r\n        },\r\n        (error?: Snotify) => {\r\n          this.mergeToast(toast, error, SnotifyStyle.error);\r\n          subscription.unsubscribe();\r\n        },\r\n        () => {\r\n          this.mergeToast(toast, {}, SnotifyStyle.success);\r\n          subscription.unsubscribe();\r\n        }\r\n      );\r\n    });\r\n\r\n    return toast;\r\n  }\r\n\r\n  private mergeToast(toast, next, type?: SnotifyType) {\r\n    if (next.body) {\r\n      toast.body = next.body;\r\n    }\r\n    if (next.title) {\r\n      toast.title = next.title;\r\n    }\r\n    if (type) {\r\n      toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], { type }, next.config);\r\n    } else {\r\n      toast.config = mergeDeep(toast.config, next.config);\r\n    }\r\n    if (next.html) {\r\n      toast.config.html = next.html;\r\n    }\r\n    this.emit();\r\n    this.toastChanged.next(toast);\r\n  }\r\n\r\n  /**\r\n   * Creates empty toast with html string inside\r\n   * @param html string | SafeHtml\r\n   * @param config SnotifyToastConfig\r\n   * @returns number\r\n   */\r\n  html(html: string | SafeHtml, config?: SnotifyToastConfig): SnotifyToast {\r\n    return this.create({\r\n      title: null,\r\n      body: null,\r\n      config: {\r\n        ...config,\r\n        ...{ html }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { SnotifyService } from '../../services/snotify.service';\r\nimport { SnotifyToast } from '../../models/snotify-toast.model';\r\n\r\n@Component({\r\n  selector: 'ng-snotify-button',\r\n  templateUrl: './buttons.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\n/**\r\n * Buttons component\r\n */\r\nexport class ButtonsComponent {\r\n  /**\r\n   * Get buttons Array\r\n   */\r\n  @Input() toast: SnotifyToast;\r\n  constructor(private service: SnotifyService) {}\r\n\r\n  /**\r\n   * remove toast\r\n   */\r\n  remove() {\r\n    this.service.remove(this.toast.id);\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { SnotifyToast } from '../../models/snotify-toast.model';\r\n\r\n@Component({\r\n  selector: 'ng-snotify-prompt',\r\n  templateUrl: './prompt.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\n/**\r\n * Prompt component. Part of PROMPT type\r\n */\r\nexport class PromptComponent {\r\n  /**\r\n   * Get PROMPT placeholder\r\n   */\r\n  @Input() toast: SnotifyToast;\r\n  /**\r\n   * Is PROMPT focused\r\n   */\r\n  isPromptFocused = false;\r\n}\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { SnotifyService } from '../../services/snotify.service';\r\nimport { SnotifyToast } from '../../models/snotify-toast.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { SnotifyNotifications } from '../../interfaces/snotify-notifications.interface';\r\nimport { SnotifyPosition } from '../../enums/snotify-position.enum';\r\nimport { SnotifyEvent } from '../../types/event.type';\r\n\r\n@Component({\r\n  selector: 'ng-snotify',\r\n  templateUrl: './snotify.component.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SnotifyComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Toasts array\r\n   */\r\n  notifications: SnotifyNotifications;\r\n  /**\r\n   * Toasts emitter\r\n   */\r\n  emitter: Subscription;\r\n  /**\r\n   * Helper for slice pipe (maxOnScreen)\r\n   */\r\n  dockSizeA: number;\r\n  /**\r\n   * Helper for slice pipe (maxOnScreen)\r\n   */\r\n  dockSizeB: number | undefined;\r\n  /**\r\n   * Helper for slice pipe (maxAtPosition)\r\n   */\r\n  blockSizeA: number;\r\n  /**\r\n   * Helper for slice pipe (maxAtPosition)\r\n   */\r\n  blockSizeB: number | undefined;\r\n  /**\r\n   * Backdrop Opacity\r\n   */\r\n  backdrop = -1;\r\n  /**\r\n   * How many toasts with backdrop in current queue\r\n   */\r\n  withBackdrop: SnotifyToast[];\r\n\r\n  constructor(private service: SnotifyService) {}\r\n\r\n  /**\r\n   * Init base options. Subscribe to options, lifecycle change\r\n   */\r\n  ngOnInit() {\r\n    this.emitter = this.service.emitter.subscribe((toasts: SnotifyToast[]) => {\r\n      if (this.service.config.global.newOnTop) {\r\n        this.dockSizeA = -this.service.config.global.maxOnScreen;\r\n        this.dockSizeB = undefined;\r\n        this.blockSizeA = -this.service.config.global.maxAtPosition;\r\n        this.blockSizeB = undefined;\r\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\r\n      } else {\r\n        this.dockSizeA = 0;\r\n        this.dockSizeB = this.service.config.global.maxOnScreen;\r\n        this.blockSizeA = 0;\r\n        this.blockSizeB = this.service.config.global.maxAtPosition;\r\n        this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\r\n      }\r\n      this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\r\n      this.stateChanged('mounted');\r\n    });\r\n  }\r\n\r\n  // TODO: fix backdrop if more than one toast called in a row\r\n  /**\r\n   * Changes the backdrop opacity\r\n   * @param event SnotifyEvent\r\n   */\r\n  stateChanged(event: SnotifyEvent) {\r\n    if (!this.withBackdrop.length) {\r\n      if (this.backdrop >= 0) {\r\n        this.backdrop = -1;\r\n      }\r\n      return;\r\n    }\r\n    switch (event) {\r\n      case 'mounted':\r\n        if (this.backdrop < 0) {\r\n          this.backdrop = 0;\r\n        }\r\n        break;\r\n      case 'beforeShow':\r\n        this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\r\n        break;\r\n      case 'beforeHide':\r\n        if (this.withBackdrop.length === 1) {\r\n          this.backdrop = 0;\r\n        }\r\n        break;\r\n      case 'hidden':\r\n        if (this.withBackdrop.length === 1) {\r\n          this.backdrop = -1;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Split toasts toasts into different objects\r\n   * @param toasts SnotifyToast[]\r\n   * @returns SnotifyNotifications\r\n   */\r\n  splitToasts(toasts: SnotifyToast[]): SnotifyNotifications {\r\n    const result: SnotifyNotifications = {};\r\n\r\n    for (const property in SnotifyPosition) {\r\n      if (SnotifyPosition.hasOwnProperty(property)) {\r\n        result[SnotifyPosition[property]] = [];\r\n      }\r\n    }\r\n\r\n    toasts.forEach((toast: SnotifyToast) => {\r\n      result[toast.config.position as string].push(toast);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\r\n  ngOnDestroy() {\r\n    this.emitter.unsubscribe();\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { SnotifyService } from '../../services/snotify.service';\r\nimport { SnotifyToast } from '../../models/snotify-toast.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { SnotifyEvent } from '../../types/event.type';\r\nimport { SnotifyStyle } from '../../enums/snotify-style.enum';\r\n\r\n@Component({\r\n  selector: 'ng-snotify-toast',\r\n  templateUrl: './toast.component.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ToastComponent implements OnInit, OnDestroy, AfterContentInit {\r\n  /**\r\n   * Get toast from notifications array\r\n   */\r\n  @Input() toast: SnotifyToast;\r\n  @Output() stateChanged = new EventEmitter<SnotifyEvent>();\r\n\r\n  toastDeletedSubscription: Subscription;\r\n  toastChangedSubscription: Subscription;\r\n\r\n  /**\r\n   * requestAnimationFrame id\r\n   */\r\n  animationFrame: number;\r\n\r\n  /**\r\n   * Toast state\r\n   */\r\n  state = {\r\n    paused: false,\r\n    progress: 0,\r\n    animation: '',\r\n    isDestroying: false,\r\n    promptType: SnotifyStyle.prompt\r\n  };\r\n\r\n  constructor(private service: SnotifyService) {}\r\n\r\n  // Lifecycles\r\n\r\n  /**\r\n   * Init base options. Subscribe to toast changed, toast deleted\r\n   */\r\n  ngOnInit() {\r\n    this.toastChangedSubscription = this.service.toastChanged.subscribe((toast: SnotifyToast) => {\r\n      if (this.toast.id === toast.id) {\r\n        this.initToast();\r\n      }\r\n    });\r\n    this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\r\n      if (this.toast.id === id) {\r\n        this.onRemove();\r\n      }\r\n    });\r\n    if (!this.toast.config.timeout) {\r\n      this.toast.config.showProgressBar = false;\r\n    }\r\n    this.toast.eventEmitter.next('mounted');\r\n    this.state.animation = 'snotifyToast--in';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    setTimeout(() => {\r\n      this.stateChanged.emit('beforeShow');\r\n      this.toast.eventEmitter.next('beforeShow');\r\n      this.state.animation = this.toast.config.animation.enter;\r\n    }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe subscriptions\r\n   */\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationFrame);\r\n    this.toast.eventEmitter.next('destroyed');\r\n    this.toastChangedSubscription.unsubscribe();\r\n    this.toastDeletedSubscription.unsubscribe();\r\n  }\r\n\r\n  /*\r\n  Event hooks\r\n   */\r\n\r\n  /**\r\n   * Trigger OnClick lifecycle\r\n   */\r\n  onClick() {\r\n    this.toast.eventEmitter.next('click');\r\n    if (this.toast.config.closeOnClick) {\r\n      this.service.remove(this.toast.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger beforeDestroy lifecycle. Removes toast\r\n   */\r\n  onRemove() {\r\n    this.state.isDestroying = true;\r\n    this.toast.eventEmitter.next('beforeHide');\r\n    this.stateChanged.emit('beforeHide');\r\n    this.state.animation = this.toast.config.animation.exit;\r\n    setTimeout(() => {\r\n      this.stateChanged.emit('hidden');\r\n      this.state.animation = 'snotifyToast--out';\r\n      this.toast.eventEmitter.next('hidden');\r\n      setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\r\n    }, this.toast.config.animation.time / 2);\r\n  }\r\n\r\n  /**\r\n   * Trigger onHoverEnter lifecycle\r\n   */\r\n  onMouseEnter() {\r\n    this.toast.eventEmitter.next('mouseenter');\r\n    if (this.toast.config.pauseOnHover) {\r\n      this.state.paused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger onHoverLeave lifecycle\r\n   */\r\n  onMouseLeave() {\r\n    if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\r\n      this.state.paused = false;\r\n      this.startTimeout(this.toast.config.timeout * this.state.progress);\r\n    }\r\n    this.toast.eventEmitter.next('mouseleave');\r\n  }\r\n\r\n  /**\r\n   * Remove toast completely after animation\r\n   */\r\n  onExitTransitionEnd() {\r\n    if (this.state.isDestroying) {\r\n      return;\r\n    }\r\n    this.initToast();\r\n    this.toast.eventEmitter.next('shown');\r\n  }\r\n\r\n  /*\r\n   Common\r\n   */\r\n\r\n  /**\r\n   * Initialize base toast config\r\n   *\r\n   */\r\n  initToast(): void {\r\n    if (this.toast.config.timeout > 0) {\r\n      this.startTimeout(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start progress bar\r\n   * @param startTime number\r\n   */\r\n  startTimeout(startTime: number = 0) {\r\n    const start = performance.now();\r\n    const calculate = () => {\r\n      this.animationFrame = requestAnimationFrame(timestamp => {\r\n        const runtime = timestamp + startTime - start;\r\n        const progress = Math.min(runtime / this.toast.config.timeout, 1);\r\n        if (this.state.paused) {\r\n          cancelAnimationFrame(this.animationFrame);\r\n        } else if (runtime < this.toast.config.timeout) {\r\n          this.state.progress = progress;\r\n          calculate();\r\n        } else {\r\n          this.state.progress = 1;\r\n          cancelAnimationFrame(this.animationFrame);\r\n          this.service.remove(this.toast.id);\r\n        }\r\n      });\r\n    };\r\n    calculate();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'keys',\r\n  pure: false\r\n})\r\n/**\r\n * Extract object keys pipe\r\n */\r\nexport class KeysPipe implements PipeTransform {\r\n  transform(value: any, args: any[] = null): any {\r\n    if (!value) {\r\n      return value;\r\n    }\r\n    return Object.keys(value);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'truncate'\r\n})\r\n\r\n/**\r\n * Truncate toast text pipe\r\n */\r\nexport class TruncatePipe implements PipeTransform {\r\n  transform(value: string, ...args: Array<any>): any {\r\n    let limit = 40;\r\n    let trail = '...';\r\n    if (args.length > 0) {\r\n      limit = args.length > 0 ? parseInt(args[0], 10) : limit;\r\n      trail = args.length > 1 ? args[1] : trail;\r\n    }\r\n\r\n    return value.length > limit ? value.substring(0, limit) + trail : value;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { SnotifyComponent } from './components/snotify/snotify.component';\r\nimport { SnotifyService } from './services/snotify.service';\r\nimport { KeysPipe } from './pipes/keys.pipe';\r\nimport { TruncatePipe } from './pipes/truncate.pipe';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonsComponent } from './components/buttons/buttons.component';\r\nimport { PromptComponent } from './components/prompt/prompt.component';\r\nimport { ToastComponent } from './components/toast/toast.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\r\n  exports: [SnotifyComponent, TruncatePipe, KeysPipe]\r\n})\r\nexport class SnotifyModule {\r\n  static forRoot(): ModuleWithProviders<SnotifyModule> {\r\n    return {\r\n      ngModule: SnotifyModule,\r\n      providers: [SnotifyService]\r\n    };\r\n  }\r\n}\r\n","import { SnotifyPosition } from './enums/snotify-position.enum';\r\nimport { SnotifyStyle } from './enums/snotify-style.enum';\r\n\r\n/**\r\n * Snotify default configuration object\r\n */\r\nexport const ToastDefaults = {\r\n  global: {\r\n    newOnTop: true,\r\n    maxOnScreen: 8,\r\n    maxAtPosition: 8,\r\n    filterDuplicates: false\r\n  },\r\n  toast: {\r\n    type: SnotifyStyle.simple,\r\n    showProgressBar: true,\r\n    timeout: 2000,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    bodyMaxLength: 150,\r\n    titleMaxLength: 16,\r\n    backdrop: -1,\r\n    icon: null,\r\n    iconClass: null,\r\n    html: null,\r\n    position: SnotifyPosition.rightBottom,\r\n    animation: { enter: 'fadeIn', exit: 'fadeOut', time: 400 }\r\n  },\r\n  type: {\r\n    [SnotifyStyle.prompt]: {\r\n      timeout: 0,\r\n      closeOnClick: false,\r\n      buttons: [\r\n        { text: 'Ok', action: null, bold: true },\r\n        { text: 'Cancel', action: null, bold: false }\r\n      ],\r\n      placeholder: 'Enter answer here...',\r\n      type: SnotifyStyle.prompt\r\n    },\r\n    [SnotifyStyle.confirm]: {\r\n      timeout: 0,\r\n      closeOnClick: false,\r\n      buttons: [\r\n        { text: 'Ok', action: null, bold: true },\r\n        { text: 'Cancel', action: null, bold: false }\r\n      ],\r\n      type: SnotifyStyle.confirm\r\n    },\r\n    [SnotifyStyle.simple]: {\r\n      type: SnotifyStyle.simple\r\n    },\r\n    [SnotifyStyle.success]: {\r\n      type: SnotifyStyle.success\r\n    },\r\n    [SnotifyStyle.error]: {\r\n      type: SnotifyStyle.error\r\n    },\r\n    [SnotifyStyle.warning]: {\r\n      type: SnotifyStyle.warning\r\n    },\r\n    [SnotifyStyle.info]: {\r\n      type: SnotifyStyle.info\r\n    },\r\n    [SnotifyStyle.async]: {\r\n      pauseOnHover: false,\r\n      closeOnClick: false,\r\n      timeout: 0,\r\n      showProgressBar: false,\r\n      type: SnotifyStyle.async\r\n    }\r\n  }\r\n};\r\n"]}